0.该项目依据  processon+github  上的总结进行推进，知识点的熟练和融合，需要深入高价值的知识点，而不是都泛泛而谈
    (每个点深入进去都是庞大的体系，所以要懂得筛选优先-简历需要 )，浅显的都无法真正上生产的。

1.spring boot无法启动，或者正常启动之后无法访问报404的解决办法
    https://www.cnblogs.com/daixinyu/p/6843335.html

2.如何查看方法，注解提示
    ctrl+shift+space
  快速生成get/set/cons
    ctrl+insert
  快速生成if/for..
    ctrl+alt+t
  句尾加； 两次切到下一行
  ctrl+shift+enter
  单行注释
  ctrl+/
  折叠展开
  ctrl+ + 或者 -

3.模块设计-实现能力
    从api /文档

4.事务

5.去重

6.数据库索引 、冗余 ..必要 --> 优化

7.时间戳

8.pattern Random uuid

9.callBack  --> listener

10.xxhelper \xxholder \ ..... 参考整理的命名常用词

11.原有逻辑影响、上下游、 链条、存量数据、在途业务、透传(过滤)、分录、切日、跑批、开关、挡板....

12.场景

13.接口定义
    与外界进行交互时，接口的定义要准确。两类 值、返回码两类。类型优先string，因为int假如没有该如何返回。时间ISOdatetime - calendar - date

-------------------------------------------------------------------------------------------------------------------------
20191107

    为什么做起来有很多问题？
        1.流程思路并没有最终定下来就开始写代码，导致流程角度反复修改
        2.接口，类结构没有定下来(详设)导致接口入参，返回...多次重构 ，就像写北京银行代码一样。--将这种反复放到设计过程中，而不是具体写代码时
            -------  代码反复修改，总是不能一次到位  ------
        3.实现中的api不熟悉，导致每写一步都有问题，诱发了没有时间去美化代码(命名，结构...)
        4.自己觉得框架难，是因为框架其实是柔和了 ----  许多技术+层(***切割业务到代码层实现****)

    解决：多写  - 多背api - 多总结向上抽象

    5W1H法，通过为什么（Why）、什么（What）、何人（Who）、何时（When）、何地（Where）、如何（How）这几个方面提出问题，
    考察研究对象，从而形成创造设想或方案的方法。
    其宗旨是：归纳问题，抓住本质，包括了客体本质（What），主体本质（Who），存在的时间形式（When）、空间形式（Where），
    存在的原因（Why），影响的程度（How）等。此后，经总结和改进将How分解成How　to和How　much，演变为5W2H法。
    因为这七个提问的英文字头是5个“W”和2个“H”故得名5W2H法。

-------------------------------------------------------------------------------------------------------------------------

     反射作为入框架的第一步，可以象胶水一样从任何地方获取东西 。可以和注解、泛型、类、当前值....关联起来操作。思考多个方向
            1.api                   如何通过反射获取相关：当前对象类相关、值、注解(注解获取对应的值)、方法
            2.哪里

     其实一个企业级的模块肯定柔和了所有的基本+高级知识，就像设计模式一样，他们是不会单独执行的。都是融合在一起的。

           动态获取值并操作  --反射
           抽离多个重复操作到面  -- aop
           不在具体代码中调用触发aop -- 配置xml  / 注解
           注解又分为校验入口 、 校验对象 、注解类型\对象 、 注解方法、注解方法默认值..(注解操作中的动态)
           aop又分为前后置、对切点的操作...
                https://juejin.im/post/5a28942cf265da431c70302c#comment

-------------------------------------------------------------------------------------------------------------------------

20191112  -- 分层分模块分类分方法分参数返回
    1.重新整理processon上的流程，使其代码流程-关联清晰化，也为后续的代码编写少返工
    2.重新组织代码目录结构，符合上述整理管理  -- 将hander / parser / binder 、Definition..统一为manager + 接口
    3.报文解析流程  doParse()
    4.context是关键，参考jbpm - bjbank 机具项目 - session

20191114  -- 架子搭完，深入实现--
    1.api
    2.先简化加载信息和规则，test框架
    3.file - stream - String https://blog.csdn.net/u010002184/article/details/51296969
    4.Java工程读取resources中资源文件路径问题 https://blog.csdn.net/ma524654165/article/details/76762046
    5.split注意点 末尾拼接字符截取
    6.数据结构的不明确 list map-entry ... 输出效果：{name=[name, 0, 0, 99, java.lang.String],{}=map []=list
    7.返回对象不是简单的map/list 要包装


    ***从别人的仿真上可以看到公共逻辑的高层抽象可以使用 '注解'减少这种重复。和这里自己定义的一个LiST<validator>一样
       不过我这种实现可以后期直接配置化，无需硬编码到bean上面。还是有必要的 --后期增强自动根据配置文件生成对应的
       javabean + 规则配置  实现无需编码代码

20191116
    1.构建表 CombinedRuler 对应表结构 processon -- 落地关系
            这里一对多是不是不能关联主键而是某个字段 ？

            这里能不能只用draftNo作为关联，建立冗余吗？  一对多-错误 这个不叫冗余，而是正常的关联字段，可以使用fk或者程序处理 sql
                    每个表表示的是不同的方面。
                    多对多：中间表   id | A_id | B_id
                解决方案：
                    设计表：一对一和一对多在表中多加一个关联字段，多对多多设计一个关联表
                    代码中实体类的编写：一对一在实体类中多加一个属性，一对多在实体类中多加一个集合属性，多对多就是在两个实体类中各加一个集合属性

            类型-长度-是否为空
            并没有使用到设计表的原则，脑海中没有套路和注意点

       mybatis
            generator 生成映射类时 修改对应路径 - 给用户赋予新建库权限
            赋权重新登陆客户端

    2.为‘该有的对象’添加@repository @service  是写在接口还是实现类中
                1.到底哪些应该由spring管理？
                2.--> springboot 常用注解
                3.生成的类是棕色的，并不是有问题，而是没有add到版本管理  -点击项目 - git - add 右上角的快捷键 commit
    3.《阿里巴巴Java开发手册》IDEA插件与Eclipse插件使用指南 https://yq.aliyun.com/articles/224817

20191118
    1.单元测试  -- 不识别应该想到‘没有注入引起的’ --单元测试本身不复杂，复杂就在对单元的划分，就像对架构层次，module抽象一样
            1.jar spring-boot-test 是否引入junit? Failed to load ApplicationContext --引入 。

               引入jar包如何配置合理的版本？
                        Maven中 jar包冲突原理与解决办法：https://blog.csdn.net/noaman_wgs/article/details/81137893

               如何生成实际代码的test相关代码？
                        使用Junit Generator V2.0(已经路径配置好) 生成 在类中进行alt+insert
                        https://blog.csdn.net/qq_26115733/article/details/70340243

               代码不识别，是因为没有扫描到，myabtis generator 生成的实现
                       #为什么这里是classpath:...
                       mybatis.mapper-locations=classpath:mapping/secKillMapping/*.xml + 启动类的@MapperScan("com.core.rule.dao")

                配置datasource 虽然在mybatis generator中配置过了，但是那是给插件的，而不是项目本身的。
                       在application.property中配置

                Failed to load driver class com.mysql.jdbc.Driver in either of HikariConfig class loader or Thread context classloader
                       在pom中引入mysql-connector-java  注意插件引入和项目引入是不同的

            2.思考到底哪里应该使用junit,是否和manage混淆，真正启动如何处理？特别是稍微有复合操作的单元测试。
                 这里manage进入，不能获得注入的信息。因为当正确注入@service时，其实关联的dao等信息也注入了。
                 相当于当前spring环境就是test下的。
                 so ：这种情况如何测试？
                        高级使用：1.baseTest 中before() \after()
                                  2.@Tranditional一致性   @Rollback() 保证数据现场


            3.自动生成的id 即虽然在mapper.xml中sql也是有id,但是可以new对象时不使用id , insert同样会正常插入

    2.数据库对象 - 函数
            mysql文档  sql执行计划 插入性能 索引  监控

    3.jdk ： api -> commonUtils
            1.jdk 已总结 + reflect + 思考实现 + common/guava工具使用  --> 形成树

20191120 - 当你打好基础，那么剩下的就是将新的模块整合上来，加强，优化。配置，学习新技术也会越来越少走许多弯路
    1.common api
    2.druid  德鲁伊
            http://blog.didispace.com/java-datasource-pool-compare/
            https://blog.csdn.net/gnail_oug/article/details/80172239
                1.maven 管理的jar包冲突  report - 等待
                2.navicat 不能及时查询到数据  -- 通过mysql客户端配合 -- 并且可以查看设置后台配置信息
                3.druid看不到单元测试

                TODO:相关参数调整和展示信息关联理解
    3.jmeter
            https://www.cnblogs.com/stulzq/p/8971531.html
            JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。
                   能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果-->录制
                   为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。


                TODO:相关参数配置(多线程访问-自动化脚本测试) - 慕课网上高性能测试视频
                TODO:监控指标监控和分析  https://blog.csdn.net/huangjin0507/article/details/51878559
                TODO:jprofiles 使用
                启动：C:\YangwenjunSoftware\jmeterServerAgent\agentServer\ServerAgent-2.2.3
                启动：jmeter
                没有出现折线图：https://stackoverflow.com/questions/46763934/graphs-generated-but-shows-waiting-for-samples-in-jmeter
                    设置时间短，跑的时间短。设置长点 5s 10s

                0.必须清晰业务流程
                1.三个组检
                2.badboy录制—代理服务器设置。抓取。排除js，css。正则匹配
                3.脚本调试 重定向—编码—乱码。最后查看实际系统的结果是否变化
                4.参数化  函数助手
                5.组

    4.idea 安装jprofile和jmeter
    5.自动编译，发包，部署到linux ：https://blog.csdn.net/weixin_41703383/article/details/79786805


20191121

    1.springboot 、cloud 的常用注解配置
    2.推进框架 checkChain + xml组装赋值 + asm生成代码
            1.数据库设计时少了rule少了字段，这样无法定位到特定报文的特定字段 -- 在generator中配置rule表重新生成
              数据库设计时少了property少了字段,propertyDesc
                    --> 字段长度设置/表字段关联/是否有必要分三个表？

              单元测试可以更便捷的对修改进行回归测试
     3.rule 责任链 check
    TODO:思考T 和 反射 ，接口定义

    TODO:linux shell  相关文档
    TODO:ppt、excel 工具

    ---------上面都是在语法熟练基础上，向设计模式，性能，安全...方面推进---------


20191122
    1.如何组装到xml bean--xml需要吗？将解析映射高层次抽象动态化
            1.修改draft表逻辑到draft module 而不是rule ，并在字段中添加template字段  blob
            2.锚点 point -- bind
            3.熟练后，速度加快
            4.navicat 查看blob字段  选中 - 备注 即可
            5.使用home / end 切换光标位置

            1.对根据业务新增的dao方法在xml中写对应实现

    2.xml-xpath...定位  -->使用绑定类库
    3.redis 缓存  https://my.oschina.net/u/3452433/blog/1831026
            1.redis client没有查看对应的数据，但是可以通过redisTemplate get得到数据
                因为没有选择库
            2.需要@bean重新编辑RedisCacheConfigure类，实现序列化 必须否则传入的
              key = xxxxx.xxx
             问题：这里@bean后为什么没有在用到的时候注入自己路径下重写的bean而是还是spring自己的bean呢？

            3.TODO:策略 一致性 强弱 refresh - 失效、调用更新
            4.redis在项目中的应用总结 https://blog.csdn.net/wang258533488/article/details/78901124
    4.log   https://www.cnblogs.com/bigdataZJ/p/springboot-log.html
            1.springboot 自带logback log4j so 直接使用
                private static final Logger LOG = LoggerFactory.getLogger(LogConfig.class);
                总觉得后面的LogConfig.class可有可无，因为随便写个其他类也不会报错，但是准确编写class信息能够提供快速定位日志的效率。
            2.配置输出到文件
                1.不同的模块生成不同的日志文件
                2.日志切割
            3.如何配置文件到本地文件

            TODO:日志切面 参考hook中其实就是为了练习aop api 和 aop思想 - 对外接口调用出参/入参记录
            TODO:推进设计不好的地方，借鉴秒杀项目定义

    5.context - process(base组件 - 自定义流程组件) servlet(cookie / session) / tomcat / spring
                注册中心 processEngine(activity/jbpm)
    6.process - 规则引擎

    7.Thread
    8.msg - mq

    第二阶段：对报文的组成 xml-schema-字段有属性 - 自定义数据类型


20191124
    1.将hu-tool工具包整合到util,但未特性化到本项目，后续开发中，优化整合。
    2.将hook项目整合过来，因为本项目几乎涵盖了hook中的知识点，所以整合进来作为后续脚手架
      整合了seckill项目，主要学到了企业级封装，类、接口定义规范化....
      设计模式 springMain
    3.将basejava中的导入 主要是原来搭建的要去做的完成和Thread

   ---* 代码中由于类路径和maven包导入，会有报错，记得处理---------


20191129 - 状态机 - rc(bbsp)
    1.为了不污染接口，利用接口的多继承，可以将粒度分开。而不是类的继承，因为类是单继承的
    2.业务字段 - 转化为表/类 - 不是简单的对应，应该在考虑扩展，性能，抽象基础上对字段进行设计。
    3.method(接口、方法、是否需要前置检查、是否删除票据、是否添加历史、是否回退历史...) -
      - dao - status(前置，后置，当前,参数) - statusmapping - info/hist表
    4.info表和hist表的不同，为什么不是自己想的那样加入时间戳，而是不同的字段呢？那么历史到底啥含义？
    5.实际项目中的状态模式 状态机 https://nicky-chen.github.io/2018/12/19/state-machine/
          使用Spring StateMachine框架实现状态机:http://blog.didispace.com/spring-statemachine/
      状态机的适用范围？         https://www.zhihu.com/question/295411490
                              https://www.cnblogs.com/21207-iHome/p/6085334.html
      bbsp的状态机：没有对应类，实质是将 ‘状态管理抽象到同一的状态管理模块，也就是这里的登记中心’，
                区分上面的将状态和转换设计成类。登记中心实质就是将每个基于票的衍生产品(贴现、转贴...)
                ,票是基准,将每个产品的前置状态、后置状态、是否可以挑出来.....。其实就是一个' 状态管理 '模块。
                那么单个产品可以使用状态机吗?


20191202
    模式的使用和流编程矛盾，将状态和转换包装成类。这样好处是啥?
    1.  currentState - event - action - newState
        - 状态模式：
         抽象类中定义默认实现为异常，约束子类重写，否则调用报错
        protected static final RuntimeException EXCEPTION = new RuntimeException("操作流程不允许");

            @Override
            public void checkEvent(Context context) {
                throw EXCEPTION;
            }

          this 引用 context参数依赖  成员

        - spring状态机: builder模式加载配置 、 定义监听器、注解配置 使状态机结构层次化
         依赖关系初始化，后置处理器
         @PostConstruct
            private void initialize() {
                this.persistStateMachineHandler.addPersistStateChangeListener(orderPersistStateChangeListener);
            }
         @Conifguration + @bean 形成全局对象

            https://nicky-chen.github.io/2018/12/19/state-machine/

        缺点：创建大量状态类
        -----jbpm和状态机是前面模式的扩展，那么前面的模式使用的场景是什么呢?-----

        - jbpm ：流程引擎 类比规则引擎，将‘ 变化抽离出来 ’ ,组合复用，比如流程去掉某个节点，添加某个节点，许多流程公用某个节点
                 在工作流中，这些都是单独类+流程定义(processDefinition - XML).重新修改定义即可发布 。流程长，复杂
                 比如机具联网核查、加密验密、....只有长和变才能体现出来，这里不适合，因为票的生命周期不会变的。流程也不是
                 个性化而是固定的(申请 -复核 -记账)短的。所以这里没有必要

                 涉及多个审批对象，以便于联系。通常用于‘ 审批 ’。比如xx审批...xx审批...

                 客户要求前台展示当前位置:https://blog.csdn.net/heishuang/article/details/49583347

                 OA:涉及多个审批，请假，报工，进货...所以复用..都是必须的


          这里的客户端就是各个产品(转贴、质押...)。票才是需要控制状态的。这里票的状态就像并发下资源，需要从多个产品来控制
        - 状态机 - 数据库状态规则+method实现状态控制 。
            1.将状态、事件、操作、监听从类级别抽离到数据库，数据库是公用的(业务系统和配置系统)，所以这里的抽象是高于类的
            2.表设计
                1.status table  一个状态变化依赖事件，前，后状态，监听
                2.statusDictionary
                3.method        其实每一个方法就是事件，

            todo:建表时，需要在表前面加上对应的模块名，比如这里表明就应该是RGCT_STATUS ..而不是单独的这个
            todo:字段是多个含义的时，使用“ _ ” 而不是想代码一样 “ 大小写 ”
            todo:变与不变 中 设计中扩展 ，适用化

    2.info + hist
        1.如何设计？info和hist是基础的表，肯定包含许多‘ 来自场景中的属性字段 ’
          历史表就是简单的将已有信息打时间戳放到历史吗？

          1.版本号
          2.时间戳
                1.前两者都会造成数据表膨胀，并且许多历史数据是不常使用的，定位查找耗时
                2.记录的实体没有明确的“单号”、“订单号”这类的业务主键该怎么办？我们可以使用创建数据时的数据库主键作为业务主键。
                    员工ID	姓名	生日	业务ID	版本号
                    1	张三	1984/12/29	1	1
                3.明细和batch表
                    明细和订单表不以id为关联，因为当订单变化时，明细无需重新绑定关联。而是在明细表中添加业务id 比如订单号.

          3.历史拉链表
                1.业务数据表的数据量不会因为历史版本记录而膨胀。因为历史数据都记录到了另外一个表中，所以业务数据表只记录了一份数据。
                2. 业务数据表的Schema不需要调整，增加额外的版本字段。由于对原有数据表不做Schema变更，所以原有查询逻辑也不用更改。对于一个现有的数据库设计，在增加历史数据记录功能时更简单。
                3.业务数据表可以直接进行update操作，不会生成新的ID。由于ID不会变，所以我们并需要业务主键应用到程序逻辑中。
                4.使用历史表记录历史版本主要是要对数据操作方法（增加、删除、修改）进行修改，使得每次数据操作时，先在历史表中留痕，然后再进行数据操作。另外就是对查询历史版本功能进行修改，因为历史数据在另外一个表中，所以对于的SQL是不一样的。当然，我们也可以创建历史版本数据库，里面保存了所有的历史表。

          4.历史表字段顺序，尽量减少表结构变更对代码影响
                1.t_user_his表的字段，把历史操作相关字段前置，后续字段保持与t_user完全一致，
                  例如t_user_his字段可以这样安排：his_id,oper_time,oper_remark,id,name,sex,age。

                  insert into t_user_his(id,name,sex,age,phone,his_id,oper_time,oper_remark) select id,name,sex,age,phone,'历史表id',timestamp,'修改姓名' from t_user where id=18970；
                  update t_user set name='xxx' where id=18970；
                  优化后 - 保证新加字段后无需修改代码
                  insert into t_user_his select ,'历史表id',timestamp,'修改姓名' ,a.* from t_user a  where id=18970；
                  update t_user set name='xxx' where id=18970；

          5.时间段统计 拉链表 - 连续性
                  begin_date /end_date


          为了和core模块关联，这里将表设计为：一个人在生活中不同的角度，一个人的状态，有些是限制的。比如
          上学状态不能去滑雪.... 扮演不同角色


20191203
        1.对status\dictionary\rgct_method进行数据库录入。定义Istudy模拟业务场景接口
        2.对对应的接口进行方法定义，这些其实增删改都不怎么用，因为作为 状态机 定义好的。由前期流程图完成
        3.1.从状态模式到复杂业务模型下的有限状态机 --> if/else 在复杂，存在中心(票)，不同场景(贴现/质押/..) 业务嵌套 --登记中心
            每个业务流程图肯定是明确的。在脑子里面，写代码因为状态机的存在将大逻辑拆解成类 Method Status xxhist
          2.没有想象的那么智能，每一个自动都是‘ 状态变化 ’

       ---整个模块书写过程中，困难，不知道合理的抽象点。是因为本身业务场景基本操作，每个流程图并没有在脑海中，
          所以当向上抽象时，无法准确把握 ‘ 变与不变 ’ ---
          当向上抽象时，从类( 设计模式 - processon -先清晰场景,分类,选择对应的模式实现,查看模式间关系-可能会需要到其他模式组合 )
          ---数据表角度

          ---接口的划分 接口的组合 继承 -一个类实现多个接口

          --方法编写中重载(特别时工具类，默认提供。对于接口方法，更具需要提供)

          ---代码是基于数据库表结构-dao -method -dao... vs DDD领域模型

          ---listxx方法时，参数Page...前台数据 。注意list的量，是否分开读取

       4.定时任务将当前表放到历史 vs 存储过程

       5.需要重新思考类设计、表设计、原来看过的书和博客，加速

       6.官方文档 Spring Boot参考指南 ：https://www.springcloud.cc/spring-boot.html
         一定要从官方的地方学习。权威，少走弯路。这些都是建立在基础扎实基础上完成的。

20191204
       1.spring是一个框架，需要客户端配置，组合。
         springboot 像一个系统，为你提供默认配置及作为一个系统需要组合的。比如缓存、测试、db...
         springcloud像一个分布式系统，从服务治理、熔断、监控、协调、分发等角度。所以说从原来的物理机间
                    下沉到代码 - 微服务 分布式  拆分

       2.框架的使用等同于在地基基础上学习工具，难点在：如何在合理的场景使用、拆分、如何提高扩展性、
         容错性、如何组合这些技术点。所以说springboot\cloud、dubbo等都是容易的。只要学习了‘ 源码 ’
         如何去定义接口...这些才是重点

       3.springboot框架学习 纯洁的微笑：http://www.ityouknow.com/spring-boot.html
            1.@Configuration注解来表明该类是一个Spring的配置，相当于一个xml文件 用于实例化Spring容器
              @bean用于向容器中注入对象，如果在UserDao类前面打上@Repository注解就不用@Bean方式
              @ComponentScan配置扫描的包。
              springBoot注解详解:https://www.cnblogs.com/tanwei81/p/6814022.html
              Spring Boot 最核心的 25 个注解:https://zhuanlan.zhihu.com/p/57689422

              统一异常处理：https://blog.csdn.net/lafengwnagzi/article/details/53034369
              https://segmentfault.com/a/1190000014966727

              监控 = spring-Actuator   + springboot admin
              Spring Boot 2 增强了对 Micrometer 的集成。RabbitMQ、JVM 线程和垃圾收集指标会自动进行 instrument 监控，异步控制器(controller)也会自动添加到监控里。通过集成，还可以对 InfluxDB 服务器进行监控。

              敏捷开发：docker + jeckins

              CommandLineRunner：适合在应用程序启动之初进行一些数据初始化的工作


    //todo:开发仿真 面向多用户，并发的需求，对分布式、微服务、调优方面发展


20191206
        1.springcloud   http://www.ityouknow.com/spring-cloud.html
        2.报文处理模块 + mq配置 + 其他..
        3.切面 对拿到的值处理  注解标识

20191209
    1.报文标识号  生成逻辑 及通信级错误  交割单啥时生成
    2.核心的就是业务和票据登记  --- 所以说所有的周边都是为 ‘业务’ 服务
    企业级 - 工业级
    4.数据库这一层的设计，而不是简单的将业务场景中的对应新建表 。设计设计
    5.清算结算要素参考行内信息展示对应的报价单信息
    6.缓存 存放哪些数据  如何刷新？https://juejin.im/post/5b849878e51d4538c77a974a
    7.全局统一 --> 锁控制  生成对应的编号
    8.springboot下的统一异常  类 baseController
    9.自动生成dao注意model \ vo \ bean 定义  ，以及生成的sql 添加必要的sql ;以及生成的注释太多
    10.表设计  主键 、 字段 、 字段名 、 约束
    11.public static int hash(String str, int k) {
    		switch (k) {
    			case 0:
    				return HashUtil.rsHash(str);
    			case 1:
    12.mockframework中工具类中定时任务，结构 + listener...
    13.时间 日期工具类
    14.工具类中泛型。。
    15.别人engine的写法 extra - freemarker ...engine
-------这是堆泛型、工具、注解以及反射整合 。将不起眼的属性抽象为类在灵活组合，拆分，学习别人的组合规律 .
       类之间的组合 结构 --------

-------将多线程整合进来-------
uu劣化
20191210
    0.行内统一的平台 仿真平台 引入springbootAdmin和springBoot+elk日志监控
    1.行内框架查看 如何设计统一平台 在这基础上应用仿真
            “微核心”+ “业务组件”的设计
            平台自带互联网基因，前台采用VUE+ELEMENT-UI+NODEJS+WEBPACK等技术，实现前后台分离开发。
            后台微服务采用spring cloud 微服务治理技术，分布式缓存（redis）,消息中间件kafka，rabbitmq等,
             高性能数据源连接池技术（Druid），分布式日志查询（ElasticSearch、Logstash和Kiabana），
             API管理工具（swager），JWT跨域身份验证
            jeckens + docker 整合  http://blog.itpub.net/69926045/
    2.如果说 反射是动态的操作对象，那么asm则是动态的对类(对象模板)进行操作，想要持久化永久，则一定用到序列化
            Java字节码处理框架ASM设计思想解析：https://www.jianshu.com/p/26e99d39b3fb
    3.engine

    1.instanceof 反射

20191211
    1.maven中type  scope  version 属性
    2.打包 plugin exclude ..war jar
    3.http://wangpuv.com/sDBx/


20191214
    1.spring boot admin 监控  --> elk 日志分析  --> 整合进来提交
    2.xml generator -  序列话
            领域知识
                1.由xsd可以想到xml，bean  反过来也一样
                2.jaxbUtil - 回顾工具类编写归范及idea提示变量设计思路
                3.借助https://www.iteye.com/blog/fengyilin-2344183完成了基本转化，但如何实现上
                  传xsd自动生成对应代码呢?找对应框架 vs java代码中上传xsd后执行java mvn 相关命令刷新
                  就像调用存储过程和shell一样。所以：https://blog.csdn.net/xietansheng/article/details/64129876
                     类对象的生成、加载、部署
                4.其实第二步，塞入 反射 其实就是使用对test中main中代码的抽象  生成绑定对象就是为了和业务对象交互，
                  因为业务对象会做许多操作。额度、风险、账务..但这里其实就一个普通对象而不是业务对象只是一个do.
                  李老师的那种不生成对象都用map数据结构处理，我前台校验...如何完成呢？
                  我这种的话如何定义do.对应生成，不仅仅要前台、后台转化、以及xml绑定

                5.我生成的类(反射生成的是对象)被引入对应的包并且在其他代码中可以使用呢？
                  1.生成字节码实体类和代码类(不是.java文件区分开) https://xilesou.hk.gg363.site/search?bih=686&biw=1396&ei=Hpv0XbPdOMP19AOP8Z-QAg&q=java+%E5%8A%A8%E6%80%81+%E7%94%9F%E6%88%90+%E5%AD%97%E8%8A%82%E7%A0%81&oq=java+%E5%8A%A8%E6%80%81+%E7%94%9F%E6%88%90+%E5%AD%97%E8%8A%82%E7%A0%81&gs_l=psy-ab.3..0i12.3619.5053..5290...1.0..0.599.2550.3-3j2j1....2..0....1..gws-wiz.......0i333.QyLbbVWQyAU&ved=0ahUKEwiz5NKf2rTmAhXDOn0KHY_4ByI4ChDh1QMICw&uact=5
                  2.反射操作的是对象属性方法和类、上面是构建一个新类，切面，动态代码(这些都不会写道.class中)
                  3.根据拿到的map去生成对应的字节码文件 asm
                  动态代理解释-JDK,CGLIB,JAVASSIST,ASM:https://yq.aliyun.com/articles/135955

                6.这里引申出来了反射 泛型 注解标识切面、切面植入、切面和spring获取要素以及对象的序列化传输和retry+设计表注意什么
                         以及源码中的二次认识

  TODO: 以上的这些解决方案都是自己想到的，应该是最low的，因为出了工具类这里，许多知识没有形成关系图--refactor


    3.出了问题一定要先看日志而不是猜测：No changes detected in schema or binding files - skipping source generation.

    4.ctrl+数字0 下一个错误地方 + 快速移动光标https://blog.csdn.net/tang9140/article/details/52333601

    玩具版 - 规范性 健壮性(异常分支、日志) 风险(安全) 可扩展(设计模式..)
                    - 框架(注解标识、切面、自定义规则配置文件) - 平台（尽可能自动化，参数之间某种关系、各种异常处理）


dao @transaction配置
    超时
    一对多，多对多...

    restful定义

Spring 5核心原理与30个类手写实战 + 《Spring Boot编程思想核心篇》




    2.流程 vs 行为 vs 状态













    行内框架是对api熟悉以及整体面有关，深度、设计模式、模型等都还不够，但足够让自己学习。--> efwk框架 逻辑
    将入参进行封装到req / resp ..与context关联  session - springContext - dbSessionFactory - threadContext ThreadLocal
    type  + 反射中使用  https://juejin.im/post/5adefaba518825670e5cb44d
    springApplication  / applicationBuilder.addListener
    xmlMessage - node / xpath
    maven 打包、build ..exlude


    为什么重写equals就必须重写hashcode?compareTo呢？
    红黑树？
    queue为什么在源码中经常作为底层实现？和list等区别?
    如何实现深度拷贝，并在哪种场景上？
    用流读取大文件，入库。



