0.该项目依据  processon+github  上的总结进行推进，知识点的熟练和融合，需要深入高价值的知识点，而不是都泛泛而谈
    (每个点深入进去都是庞大的体系，所以要懂得筛选优先-简历需要 )，浅显的都无法真正上生产的。

1.spring boot无法启动，或者正常启动之后无法访问报404的解决办法
    https://www.cnblogs.com/daixinyu/p/6843335.html

2.如何查看方法，注解提示
    ctrl+shift+space
  快速生成get/set/cons
    ctrl+insert
  快速生成if/for..
    ctrl+alt+t
  句尾加； 两次切到下一行
  ctrl+shift+enter
  单行注释
  ctrl+/
  折叠展开
  ctrl+ + 或者 -

3.模块设计-实现能力
    从api /文档

4.事务

5.去重

6.数据库索引 、冗余 ..必要 --> 优化

7.时间戳

8.pattern Random uuid

9.callBack  --> listener

10.xxhelper \xxholder \ ..... 参考整理的命名常用词

11.原有逻辑影响、上下游、 链条、存量数据、在途业务、透传(过滤)、分录、切日、跑批、开关、挡板....

12.场景

13.接口定义
    与外界进行交互时，接口的定义要准确。两类 值、返回码两类。类型优先string，因为int假如没有该如何返回。时间ISOdatetime - calendar - date

-------------------------------------------------------------------------------------------------------------------------
20191107

    为什么做起来有很多问题？
        1.流程思路并没有最终定下来就开始写代码，导致流程角度反复修改
        2.接口，类结构没有定下来(详设)导致接口入参，返回...多次重构 ，就像写北京银行代码一样。--将这种反复放到设计过程中，而不是具体写代码时
            -------  代码反复修改，总是不能一次到位  ------
        3.实现中的api不熟悉，导致每写一步都有问题，诱发了没有时间去美化代码(命名，结构...)
        4.自己觉得框架难，是因为框架其实是柔和了 ----  许多技术+层(***切割业务到代码层实现****)

    解决：多写  - 多背api - 多总结向上抽象

    5W1H法，通过为什么（Why）、什么（What）、何人（Who）、何时（When）、何地（Where）、如何（How）这几个方面提出问题，
    考察研究对象，从而形成创造设想或方案的方法。
    其宗旨是：归纳问题，抓住本质，包括了客体本质（What），主体本质（Who），存在的时间形式（When）、空间形式（Where），
    存在的原因（Why），影响的程度（How）等。此后，经总结和改进将How分解成How　to和How　much，演变为5W2H法。
    因为这七个提问的英文字头是5个“W”和2个“H”故得名5W2H法。

-------------------------------------------------------------------------------------------------------------------------

     反射作为入框架的第一步，可以象胶水一样从任何地方获取东西 。可以和注解、泛型、类、当前值....关联起来操作。思考多个方向
            1.api                   如何通过反射获取相关：当前对象类相关、值、注解(注解获取对应的值)、方法
            2.哪里

     其实一个企业级的模块肯定柔和了所有的基本+高级知识，就像设计模式一样，他们是不会单独执行的。都是融合在一起的。

           动态获取值并操作  --反射
           抽离多个重复操作到面  -- aop
           不在具体代码中调用触发aop -- 配置xml  / 注解
           注解又分为校验入口 、 校验对象 、注解类型\对象 、 注解方法、注解方法默认值..(注解操作中的动态)
           aop又分为前后置、对切点的操作...
                https://juejin.im/post/5a28942cf265da431c70302c#comment

-------------------------------------------------------------------------------------------------------------------------

20191112  -- 分层分模块分类分方法分参数返回
    1.重新整理processon上的流程，使其代码流程-关联清晰化，也为后续的代码编写少返工
    2.重新组织代码目录结构，符合上述整理管理  -- 将hander / parser / binder 、Definition..统一为manager + 接口
    3.报文解析流程  doParse()
    4.context是关键，参考jbpm - bjbank 机具项目 - session

20191114  -- 架子搭完，深入实现--
    1.api
    2.先简化加载信息和规则，test框架
    3.file - stream - String https://blog.csdn.net/u010002184/article/details/51296969
    4.Java工程读取resources中资源文件路径问题 https://blog.csdn.net/ma524654165/article/details/76762046
    5.split注意点 末尾拼接字符截取
    6.数据结构的不明确 list map-entry ...
    7.返回对象不是简单的map/list 要包装


    ***从别人的仿真上可以看到公共逻辑的高层抽象可以使用 '注解'减少这种重复。和这里自己定义的一个LiST<validator>一样
       不过我这种实现可以后期直接配置化，无需硬编码到bean上面。还是有必要的 --后期增强自动根据配置文件生成对应的
       javabean + 规则配置  实现无需编码代码

20191115
    1.责任链
