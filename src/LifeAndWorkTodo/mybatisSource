 
 0.mybatis执行流程：https://www.processon.com/view/5cc57a59e4b059e20a0c21c0
 1.mybatis各个组件: https://www.processon.com/view/5f754425e0b34d0711f0bb8c#map
 3.//总体源码讲解：
	Mybatis技术内幕：  https://my.oschina.net/zudajun?q=Mybatis
 
- 就像logback-spring.xml是log和spring的融合一样，mybatis和spring融合就是这个。所以思考 ===>  切入点 <=== 比如取spring中变量到myatis中进行判断。


	1.@mapper修饰mapper接口
	2.通过 Mapper.xml中的<mapper namespace="">来完成xml是实现和mapper接口的关联
	3.在任意spring扫描的类上(启动类vs@configration)加上mapperscan使spring的MapperScannerRegistrar解析为springbean
	4.dbconfig可以配置@mapperscan / datasouce <--- selector不同选择不同的数据源 / location - 多个文件比如单独的common.xml + body.xml...
	5.在配置基础上，加入spring注解@conditional...来灵活配置


 1.事务 -> db事务 交由spring管理 --关于Spring+Mybatis事务管理中数据源的思考：https://juejin.cn/post/6844903496764882957
 	1.https://my.oschina.net/fifadxj/blog/785621
 	  https://www.jianshu.com/p/6b275553b54f
 	  SqlSessionUtils.isSqlSessionTransactional 判断是否交由spring管理事务
 	  DataSourceTransactionManager
 	  		1.connectionHolder
 	  		2.TransactionSynchronizationUtils
 	  		3.unwrapResourceIfNecessary

 	  本质都是通过connection操作数据库完成，所以这是数据库概念api  <-- checkpoint机制 ---> . 特别是spring的传播行为

 2.session资源 =  该对象持有的其他对象引用。 属性越多，越庞大 比如这里的configration 其实这里的sqlsession持有了所有db操作的信息。

 3.db层面sql逻辑 <if...--加载解析转化为代码逻辑--代码逻辑是什么样的呢？如何维护？ xml解析 - 注解解析 - 并维护关系  
 		https://www.cnblogs.com/fangjian0423/p/mybaits-dynamic-sql-analysis.html *****
 		可以用来扩展 动态 xml和解析 <======= 借鉴


	   配置多，是因为底层帮你做了。比如缓存，转换，刷新，timeout ..具体查看XMLStatementBuilder.parseStatementNode查看可以的配置信息。
	   通过简单的配置即可实现，本来自己需要代码去控制的。这也是框架做的。将需要的东西封装起来并提供简单暴露


	   怎么感觉像递归呢？如何理解 DynamicContext - ContextMap
	    public boolean apply(DynamicContext context) {
	        if (this.evaluator.evaluateBoolean(this.test, context.getBindings())) {
	            this.contents.apply(context);
	            return true;
	        } else {
	            return false;
	        }
	    }

 4.作用于db,而又融合于spring  
 		1.使其成为spring的bean 
 			Spring Boot中Mybatis启动过程概述  == https://my.oschina.net/yangjianzhou/blog/3022258
 			   1. 两种方式：	
 		    	   MapperScannerConfigurer继承了beanfactorypostprocessor  vs MapperScannerRegistrar 区别：一个是注解一个xml：https://www.wetsion.site/mybatis-mapper-register-autowire.html
				   factorybean 写入sqlsessionfactory - 加载xml配置信息 -sql信息 
				   问题：这些不同形式的位置写入spring的区别是什么？
			    2.Spring finishBeanFactoryInitialization  https://www.cnblogs.com/ZhuChangwu/p/11755973.html

		2.
	   		Spring钩子方法和钩子接口的使用详解:https://www.jianshu.com/p/e22b9fef311c

	  	3.  spring中那么多注解是如何和处理类绑定的？？？

	  	4.如何让注解和实现类关联起来
	  		1.spring4.1.8扩展实战之八：Import注解 https://cloud.tencent.com/developer/article/1438658
	  		2.https://wenku.baidu.com/view/41338d73ac02de80d4d8d15abe23482fb4da02cd.html
	  		3.@conditionalOnAny  https://www.cnblogs.com/cxuanBlog/p/10960575.html  https://blog.csdn.net/pengjunlee/article/details/79700127

	  	5.关与 @EnableConfigurationProperties 注解 https://www.jianshu.com/p/7f54da1cb2eb

 5.自定义类型转换器 -映射 convert
 		baseExcutor. public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
 		DefaultResultSetHandler.handleResultSets == objectFactory.create创建对象反射 再set..赋值
 		ResultSetWrapper == wrapper是什么 vs holder
 			holder：包含几个同级别的对象
 			warpper:增加了额外修饰  vs proxy:权力更多。可以判断核心执行方向




 6.druid  -池化- https://www.cnblogs.com/hama1993/p/11421576.html  可以对照线程池  == apache.common.pool类  主要是core/max/min/过期/回收...不同场景下控制
 		1.mybatis 插件扩展
 		2.是什么 ：连接池 在datasouce上的一层。myabtis在这个的上一层 https://blog.csdn.net/nuliPerfect/article/details/52108036 除了作为连接池还作为可以监控数据库访问性能获得SQL执行日志   vs 基于Filter－Chain模式的插件体系。
 			1.Druid-类图-属性表  https://www.cnblogs.com/hama1993/p/11557723.html
 			2.池化技术（一）Druid是如何管理数据库连接的？ https://www.cnblogs.com/hama1993/p/11421576.

 		3.多线程
 			锁： 





 
 7.接口和资源映射定位 - namespace - 自定义关系 mapperscan连接config和mapper.java关系  - 明确哪里默认配置是如何关联的  <--- 看开头 对象引用关联
 9.多数源配置和隔离-  本身就是不同的sqlsession 只是大对象 通常没有必要不这么设置浪费空间

 10.多个线程调用如何？连接池？如何使用? 如何做到线程安全的？
 		1.https://blog.csdn.net/liuxiao723846/article/details/52424802
 		2.mybatis中SqlSession的线程安全性讨论：https://blog.csdn.net/Zhs901026/article/details/103997750   
 			同一个defaultSqlsession一级缓存导致put(cachekey,xxxHolder)
 		3.sqlSessionManager:SqlSessionInterceptor动态代理 + 门面(manager) + threadlocal实现绑定-thread/session vs map-任意
 		3.SqlSessionTemplate如何做到线程安全的 -- threadlocal
 				SqlSessionTemplate是MyBatis专门为Spring提供的共用SqlSession的权限交给Spring去管理。

		http://www.magicj.top/2019/11/06/SqlSessionTemplate%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/
		SqlSession真正的实现类只有DefaultSqlSession，SqlSessionManager和SqlSessionTemplate都是通过代理转发到DefaultSqlSession对应方法。



 11.mybatis全局配置-开关 mybatis-config.xml mybatis设定全局变量:https://www.cnblogs.com/voctrals/p/8615214.html
12.框架不适用spring:启动后初始化了数据到cache/对应对象。vs 业务代码中相互调用。
13.动态代理了哪些内容？wrapper
		1.bean beandefiniton beandefinitonHolder 到底依次添加了些什么东西 *** 包含了扩展wrapper了哪些信息/
			https://blog.csdn.net/qq924862077/article/details/73558848 类似于dto 包含主要对象及其他描述
			https://www.cnblogs.com/GooPolaris/p/8177989.html

14.提供性能
	1.二级缓存  map ==> PerpetualCache <== 缓存设计 回收策略... https://tech.meituan.com/2018/01/19/mybatis-cache.html
			 0.cachekey设计：BaseExecutor.createCacheKey对应元素 取 hashcode 值 *****
			 1.先从缓存去命中 ==== guava.cacheBuilder = key设计 BaseExecutor#createCacheKey 
			 if (list != null) {
                    this.handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
                } else {
                    list = this.queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
                }

             2.localCache的key值生成策略，与查询方法、参数等有关，完全一样的查询，生成的key是一样的。读者可以查看源码

             3.sqlsessionUtils:判断key是否包装  registerSessionHolder

             4.针对 缓存key value要明确实际的对应关闭，比如业务中的 向量 == 召回。 但这里的问题是：数据在不断更新，这种缓存如何保证是最新的呢？
             		<-- 触发机制？ --> 要求性 ，没有必要那么准，设置超时时间即可刷新就好

             		**对数据库发生了修改操作，一级缓存是否会失效。开启两个SqlSession，在sqlSession1中查询数据，使一级缓存生效，在sqlSession2中更新数据库，验证一级缓存只在数据库会话内部共享。 即只在 数据库会话内部共享 == 多个sqlsession操作可能造成脏数据	

             5.一级缓存  一次数据库会话中，执行多次查询条件完全相同的SQL 。 通过threadlocal保证安全，在同一个sqlsession中进行localCache( )判断。
                        相对于原来，缓存的范围从全局变为了线程内部。
               二级缓存  同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。  从上面：statement - session - namespace(来自不同的session)
               				如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存后，会使用CachingExecutor装饰Executor，进入一级缓存的查询流程前，解决上面sesion间脏数据
               				type：cache使用的类型，默认是PerpetualCache，这在一级缓存中提到过。
							eviction： 定义回收的策略，常见的有FIFO，LRU。
							flushInterval： 配置一定时间自动刷新缓存，单位是毫秒。
							size： 最多缓存对象的个数。
							readOnly： 是否只读，若配置可读写，则需要对应的实体类能够序列化。
							blocking： 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。

					MyBatis的二级缓存不适应用于映射文件中存在多表查询的情况。可以使用Cache ref，让ClassMapper引用StudenMapper命名空间，这样两个映射文件对应的SQL操作都使用的是同一块缓存了。
			 6.hit radio 缓存命中率

			 7.包装器：SynchronizedCache -> LoggingCache -> SerializedCache -> LruCache -> PerpetualCache。

			 8.在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。



    2.xxHolder不不一定是有threadlocal  总体代表:持有对象引用 复合对象 类似于context == SqlSessionHolder
	2.延迟加载'

			Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。 它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。 当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。

			底层同样是：动态代理  https://my.oschina.net/wenjinglian/blog/1857581   DefaultResultSetHandler
			
	3.与db交互
	4.多个excutor
			1.委派给具体的执行器 CachingExecutor委派给base.../ session委派给excutor../delegate
			2.batchExecutor
			3.public class CachingExecutor implements Executor {
    			private Executor delegate; --- 同一接口下实现阶梯持有

15.plugin
	1.



16.源码中的锁机制：
		1.druid == retrentlock
		2.mybatis== threadlocal 


=======mybatis和spring整合及全局===========
分为两类 1.mybatis自己启动  2.融合在spring中



=========tip=========

	checkConfigFileExists
	parsePendingResultMaps 
	methodCache
	静态类 - 同一个类中 / 私有类 /自定义contextMap数据结构...
	traceEnabled
	(Resource[])result.toArray(new Resource[result.size()]);转化
super(configuration, contents, "WHERE", prefixList, (String)null, (List)null);
    枚举私有化构造方法
    Assert.notNull(sqlSessionFactory, "Property 'sqlSessionFactory' is required");
    Logger.debug ..
    catch中资源释放; 写法 if后面有空格，内容之间没有
    		catch (Throwable var11) {
                unwrapped = ExceptionUtil.unwrapThrowable(var11);
                if (SqlSessionTemplate.this.exceptionTranslator != null && unwrapped instanceof PersistenceException) {
                    SqlSessionUtils.closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);
                    sqlSession = null;
                    Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException)unwrapped);
                    if (translated != null) {
                        unwrapped = translated;
                    }
                }
       PropertyCopier.copyBeanProperties(type, enhanced, original);

    通过afterPropertiesSet进行校验判断
 	public void afterPropertiesSet() {
        if (this.getDataSource() == null) {
            throw new IllegalArgumentException("Property 'dataSource' is required");
        }
    }
    2.hasText - containsText
    exeToCheck
    异常中资源释放，降级...
    logger.debug打印日志，错误定位日志，平时info就是为了关键链路可以。否则就没有必要。但增加系统损耗
	transactionActive  属性初始化/构造器初始化
	shouldProcessMoreRows 见明之意

======核心组件的组成================

1.SqlSessionFactoryBean 
	1.外在展现DatasouceConfig <-- 可以作为二者融合的依据。从spring取值塞入mybatis的sqlSessionFactoryb:比如开关用于sql <if test = "">是否执行
	2.如何识别spring和让spring识别：FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {
	3.ResourcePatternResolver - PathMatchingResourcePatternResolver
		1.ResourceLoader
		2.PathMatcher
		3.doFindAllClassPathResources - Enumeration
	4.MetadataReaderFactory  - CachingMetadataReaderFactory
	5.Resource configLocation
		1.ResourceAdapter
	6.Configuration
		1.safeRowBoundsEnabled ...
	7.Resource[] mapperLocations
	8.DataSource
	9.TransactionFactory
		1.SpringManagedTransactionFactory/JdbcTransactionFactory/ManagedTransactionFactory
	10.SqlSessionFactoryBuilder
	11.SqlSessionFactory
	12.failFast
	13.Interceptor[] plugins  - 扩展
		1.QueryInterceptor
		2.PageInterceptor
	14.typeHandler<?>[] typeHandlers
		1.	
	15.VFS
	16.Cache
		1.查看对应的cache
		2.
	17.ObjectWrapperFactory

2.SqlSessionTemplate - faceAdsNamedParameterJdbcTemplate	
	1.PersistenceExceptionTranslator ExceptionUtil
	2.sqlSessionProxy SqlSessionInterceptor - 代理了selectOne....等实现了在sqlsession上增加了自动提交
		1.catch中对代码处理


3.sqlsessionFactory - sqlsession
   1.openSessionFromDataSource() <== 返回：transaction 不自动提交+ sqlsession 
   2.Executor vs Iterator迭代
   3.ErrorContext.instance().reset();
   4.多数据源：1.多个不同数据库  2.统一数据库的多个sqlsessionFactory - 什么时候需要配置多个呢？--sqlsession
   5.Configuration
   		1.Environment
   		2.safeRowBoundsEnabled
   		3.aggressiveLazyLoading
   		4.useGeneratedKeys - KeyGenerator
   		5.cacheEnabled   LocalCacheScope - session/statement  - 默认session  incompleteCacheRefs
   		6.AutoMappingBehavior  -- AutoMappingUnknownColumnBehavior
   		7.ReflectorFactory  
   		8.ObjectWrapperFactory
   		9.CglibProxyFactory  proxyFactory = new JavassistProxyFactory();默认使用java
   		10.MapperRegistry  -- TypeHandlerRegistry
   		11.InterceptorChain
   		12.sqlFragments
   		13.XMLStatementBuilder - MapperAnnotationBuilder
   		14.CacheRefResolver
   		15.cacheRefMap
   		16.lazyLoadTriggerMethods = new HashSet(Arrays.asList("equals", "clone", "hashCode", "toString"));
   		17.StrictMap 自定义map	-- 自动的非全限定类名映射也起作用
   		18.buildAllStatements() - parseStatementNode
   			1.this.context.getBooleanAttribute
   			2.SqlSource.getBoundSql
   	6.TransactionFactory
   		1.DataSourceUtils.isConnectionTransactional
   		2.ConnectionHolder
   			1.transactionActive
   			2.savepointsSupported
   			3.TransactionIsolationLevel
   			
 	7.executor
		1.public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {



5.SqlSessionManager - 资源数据隔离
	1.ThreadLocal<SqlSession> localSqlSession


4.jdbcTemplate vs mapper关联

6.DataSourceInitializer
	1.DataSourceProperties
		1.ApplicationListener
			解耦合方式：通过applicationContext.publishEvent(new DataSourceInitializedEvent(this.dataSource));发布
			           通过DataSourceInitializer implements ApplicationListener<DataSourceInitializedEvent> onApplicationEvent来处理接听到事件
			spring如何调用这些监听到的事件呢。其实事件就是在a() ; b() 更灵活了

		2.DataSourceProperties + datasouce
		   这里需要从spring中获取datasouce，因为他们都不是一个来源。datasouce接口时java中的。 spring融合getBeanFromType....获取到


		3.@PostConstruct
			在构造方法初始化后，初始化下面的内容。顺序
		4.this.initialized = true; 标识控制   xxxenable 取代isxxx
		5.SortedResourcesFactoryBean
		6.Collections.singletonList(location)  初始化的时候，初始化列表大小
		7.ResourceDatabasePopulator
			DatabasePopulatorUtils.execute(populator, dataSource); 获取connection连接
			 ScriptUtils.executeSqlScript(connection, encodedScript, this.continueOnError, this.ignoreFailedDrops, this.commentPrefix, this.separator, this.blockCommentStartDelimiter, this.blockCommentEndDelimiter); 《---- 执行填充，调用
			 		1.readScript 其中有分割；注释--
			 		2.appendSeparatorToScriptIfNecessary
			 		3.splitSqlScript
			 		4.Statement stmt = connection.createStatement(); stmt.execute(statement);
			 		5.int rowsAffected = stmt.getUpdateCount();
			 		===问题：什么时候触发呢？

7.resultHandler
		1.DefualtObjectFactory
		2.DefaultResultContext<T>

8.DatasouceTransactionManager

9.SqlCommand和MethodSignature


