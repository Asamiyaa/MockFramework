0.总结：
	1.最后落地方案 -- 而不是讨论 -- 自己判断是否重要 *** 领导要的思考后的结果，而不是你思考过程。老板最后只需要拍板。
	2.不要带着情绪工作，静下心来。充分测试，最后再提交codereview

	***其实一个日志框架完成了：  1.流写入-自动生成对应路径      2.大小监控切割/日期/和清理        3.异步    4.过滤  5.格式化输出    6.不同级别输出过滤比如debug是在 ‘可能出现问题，需要排查错误的地方使用，平时用来记录流程流转就是用info,出现问题时候在打开debug模式 ’
	7.logContext
  =======> 日志框架源码整理 <===== 解决方案思考

1.需求思考
	1.异步  *** 配置 ch.qos.logback.classic.AsyncAppender
	2.重试	**  没有必要逻辑简单，只是写日志，并没有网络等，只要磁盘没有问题就可以。这里有定义了过期策略。所以说磁盘满的可能性为0 -- 别徒增复杂度 过度设计
	3。核对 双计数 本地  日终  --> 目前没有 是否需要添加呢？ checksum文件校对
	4。成功  -- 有数据？senderror ? vs ==>>
		' ****sendsucess?***<---****''    **** isvid..   思考原理：消耗了资源就需要扣费
	5.参数值 - 配置化  pass/user...  key / code 抽象到配置文件 -- 数据库  注意这里的默认值.-- 如果没有就要报错是判断是否需要默认值的标准。<-- 	并不是都要计费，所以需要默认值
			 开关。<--- 适配不同的环境。不同条件
	6.日志文件大小 - clean?   通过log的rolling策略进行 SizeAndTimeBasedRollingPolicy
	7.json运用和写入 vs string  inputstream..写入


2.伪代码
	1.log组件 - 可以打印对应位置的组件配置 - 包含重试-异步-
	2.配置信息常量化 - 开关化
	3.借助slf4j的能力
	1.在log.xml中配置异步、path信息  <--- 部署的时候会将log-xml...自动部署过去吗？是否需要定义路径
	2.将path独立为环境变量，即springboot配置-即rms数据库配置  https://stackoverflow.com/questions/53289488/logging-path-to-log-path
	3.思考 写文件 vs 写日志 是否都可以借助log系统完后 vs FileUtils...write .... <-----*****
	4.日志灵活各种配置 过滤 策略  其中也有上下文  https://www.cnblogs.com/jybky/p/12202502.html   
	5.springboot自定义日志路径 https://blog.csdn.net/taozui0314/article/details/104061672
3.实现

4.部署 验证

	0.提交代码	<----- 太自信。导致自己测试完就codereview,并没有联调导致问题百出。
	1.数据库配置
	2.部署后查看是否在log.back.xml中生效，不生效手动配置 vs 哪里读取的？ <--- 在assem模块下 。 因为手动改了没有生效，启动覆盖了。所以拿这个从代码搜索
	2.现在是分天切割的。别人轮询如何取？实时吗？漏了呢? -- 不管 ali - sls 实时抓取日志信息
	4.corp_id /isv_id 取哪个值？ 目前取的是corp_id  ==> 取isv_id 变更接口
	5.自检调用是否统计？此时corp_id为null shif  

