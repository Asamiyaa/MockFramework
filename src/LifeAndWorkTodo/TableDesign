------------------------------宗旨-------------------
     表设计和对象设计一定程度上是一致的。只是对表/对象 自身特性。但是二者也不是完全映射体现，比如对象间的组合，嵌套。数据库其他对象使用，比如索引，函数，seq....
     表之间的外键就是对象的引用。。。有些逻辑表级不体现，直接从service对这些进行控制处理
     表的根本来自 ‘业务理解’+ 表设计技巧

     业务字段 - 表设计宗旨 - 未来预测(就像架构一样) - 性能难度 - 模型 .... --> 表

     数据库常用函数总结和业务结合 比如replace / distinct ...
     状态机表 - 未考虑字段、继承、业务等 -- 需要重新结合看的书写 - 有些表是其实是同等于架构的设计级别，一定要明确业务和技巧

----------------------实现-----------------------
    1>设计表结构：RuleDo.java + statusDo.class + 表创建过程中表空间，索引，主键等设计

    2>.sql(转化思路重写sql?)
       RuleDoMapper.interface

    3>.orm
        从shcpe得到快速hibernate \mybatis ---> mybatisPlus .简单系统要选择快速开发完成

参考：
   1.表设计相关书籍
         powerDesign - 三大范式 - 《反模式》
        《SQL查询的艺术》
        《SQL必知必会》
        《SQL解惑》

   2.数据库相关
        《深入浅出MySQL数据库开发优化与管理维护》
        《Mysql实战45讲》
        《Oracle常用数据字典说明及常用脚本》


 1.表设计



