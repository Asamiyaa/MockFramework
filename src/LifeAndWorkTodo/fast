
2>性能  - Hmain.java
        1.异步 -(解耦) 异步编程思考(为什么使用线程处理 https://juejin.im/post/5a8fc6345188257a804aa956) 某个节点上异步，内部还是同步 (event - callback -listner)
              将接口拆成两个，异步返回、调用者再去查询结果
              回调实例 ，借助监听机制
           1> thread     SerialNumGenerator  ExecutorServiceHelper线程池
                D:\Data\mySrc\MockFramework\src\test\thread\MainClass + ThreadMain
                C:\Users\73699\Desktop\think\极客时间\极客 并发
           2>事件
                回调模式 -  监听器模式 - spring事件机制 - mq
                比起在发布者线程中new 线程更解耦 。业务逻辑上是异步的，且允许消费者自己订阅的
                Event

           3> mq
                AmqMsgContainerFactory.java

           4> netty NIO/AIO
                netty.java
                线程和IO模型的极简知识:https://blog.csdn.net/Innost/article/details/90633199
                高性能IO模型与线程模型:https://www.jianshu.com/p/30fac4e11513

             ---数据传输基础：序列化 Serializable.java---
             ---            传输协议
       2.缓存        redis实现
       3.批处理      batch 分页 - 提供方法获取所有一定要注意内存是否可以容许 vs 分页
       4.压缩        压缩耗时 + 传输压缩数据耗时 + 解压耗时。压缩它的本质是资源的置换，是一个时间换空间，或者说是 CPU 资源换存储资源的游戏。提高写入和数据传输
       5.业务流程优化
                1.数据结构调整  比如kafka就将从pageCache - 用户内存 - socket内存转为 pageCache - socket
                2.redis单线程处理模型设计
       6.分段(分页查询)、分片、分库表　分组　设权限

参考：
       共享：内存共享 - 线程成员共享