总控

      6H2w  when  - where - who - why - what(操作什么数据)-  how to do - how much(花费、代价)
      pjs仿真已经完成，基础已经。所以写代码时，迅速设计需要的组件。。。不要纠结，快速思考
      如何快速熟悉一个系统：https://mp.weixin.qq.com/s?__biz=MzI5ODQ2MzI3NQ==&mid=2247488864&idx=1&sn=f49ef8485824e31c3aa004b1ce38b517&chksm=eca42c24dbd3a532faf8a62b40f38065f7902c51aeaa0cef9329c22fdba0f492cab6313b31c2&mpshare=1&scene=1&srcid=&sharer_sharetime=1580896363562&sharer_shareid=a85f43e6bdca32f055debf17d8961580&key=39337f4ec293dafdfc0161472260bdb7998249732f5cd844da089a4b7ea528c652e772d5354e9fa4ad529b223d153a97361d8ef32fa74009374e4d2c2bf9a10c1582256c828e18b8c04ad0817b9d9f71&ascene=1&uin=MTQ4Mjg5ODY2MQ==&devicetype=Windows+7&version=62070158&lang=zh_CN&exportkey=AekBIxKXBoKH/Q+WBLwN0fg=&pass_ticket=aahg3lYoj4ihB4Rk4ZixqZTXQpuZ/CagHeKxwZTyCgHDHg3ao789F/+EwE51J72C
      如何维护老系统 : https://blog.csdn.net/shan9liang/article/details/44702605

      src/LifeAndWorkTodo/photo/写代码力不从心原因.png
      做过程分解的时候，我建议工程师不要把太多精力放在工具上，放在设计模式带来的灵活性上。
      而是应该多花时间在对问题分析，结构化分解，最后通过合理的抽象，形成合适的阶段（Phase）和步骤（Step）上。

      
      每一行代码背后都是对多个场景、技术、解决方案的思考。最后取舍和不足。。。
      注意dealine合理分配保证最后代码完成为70%
         menu简版：
         ==>需求分析(业务场景-业务分支 - model - 表)
         ==>伪代码(流程设计(分支) -接口设计 - 使用技术codeimpl(fast-异常-日志-模式-灵活性-降级-超时..) 
         ==>写代码实现( 非业务代码-查看网上实现 vs 业务影响性完整)
         ==>测试(代码 - 分支(每个分支必须都测) - 模块集成 - 线程 - 性能)
                  除了做性能测试，其他的每个测试都要进行剖析，每个错误 爆出来必须解决，否则就是给自己挖坑***
                  切记，每个场景都要测，每个分支都要测，预期结果分析；包括日志打印是否符合。因为经常会因为没有思考全面，需要测试进行归并，完善
                  测试的时候一定要注意有值/没值/极端值/ 比如for循环边界，[]开闭区间，null, null < 0.0f 这种就会报错，是否传参，传了怎样，没传怎样
                  提交代码的时候，一定要返回来细读需求文档，逐字逐句。保证自己的开发内容匹配 。。分支完整 。
                  一定要明确自己的需求影响性，是否为所有的分支添加了该逻辑。
         ==>整体联调(前后端大小写-返回值合理-接口异常处理)) 
         ==>最后拿整理和规范进行全局扫描，查看是否考虑完整，是否有优化地方

         menu详版：
         ==>具体的内容查看解决方案

         devops.脑图：
         ==>具体的内容查看解决方案 
                  灵活性：                       脑图 + 注解灵活：annBoy
                  在多线程环境下(任何服务都在多线程，有的是自己创建的，有的容器比如tomcat...,所以类中的成员属性一定要注意)   
                              chengyuan -super构造器/普通方法 不完全重写写一部分，后半段super..调用公共 | shijian(事件、异步、轮训、reactor)|initSikao
                  是为了解决在war.自检中遇到的问题，以及在上下文中通过继承父类来传递进行的思考
      
          ===>现在的我可以分辨哪些是公共逻辑，哪些是业务逻辑，对于公共逻辑则先查看网上是否有解决方案。再加工。。 网上解决方案 + fragment
    
    
    抽象是否合理，是否过度设计：从底层开始，if -> 方法 -> 类 -> 模式 链(list -> fore) 模式中自动传递 。。一定时逐渐 。逻辑是否稳定，是否有必要抽象出来类 。 不要复杂化设计
    优秀的架构师思想和优秀的代码设计，这些足以让你多去阅读，细细品味：   goHead  *********************** 自己完成的需求和思考，记得思考每次需求前
    代码持续设计和重构：https://www.processon.com/view/link/5dca64dae4b0fc314a0dfaad#outline 、https://www.processon.com/view/link/5cb5262ee4b059e209f987a9#outline
    源码提供解决方案：
                        1.slf4j等日志系统   -- slf4jsource
    
    0.todo                                             todo
    0.已有实战                                               war
    1.人性和工作                                             LifeWork
    2.业务基础和现实解决                                     businessHandle
    3.流程设计                                               proccess
    4.领域模型                                               model      //TODo:极客时间
    5.表设计                                                 TableDesign
    6.技术架构选型                                           frame
    7.整合-新技术及代码实现                                  codeImpl
                设计模式整合                                ---其实就是将逻辑从场景-方法抽到全局对整个项目层面比如sorter\distinctor...都是更高一层的思考。抽上来之后就要考虑设计模式了。
                                                           ---你对设计模式不知道如何合理使用，是因为你不知道使用场景，解决了‘ 哪些问题 ’.,许多问题不是简单一个，而是一个诱发另一个，一个
                                                           设计模式解决了这个链上的问题，所以当你使用时，你不知道到底解决了 ‘ 哪些 ’ 获取是杀鸡用了牛刀！！！所以你要假设自己去实现，
                                                           直到推导到设计模式，才是真正理解了。
                                                       
                模块设计-(类设计)(简洁性 - 健壮性 - 可扩展)
                (初始化，定位，信息结构、资源获取...)
                (springboot、mq、redis、quartz、validte....)
                precheck(通用+业务) -> 入参准备  -> 调用 -> 回填、状态

        代码片段/tip：                                        fragment
        数据结构和算法                                        DsA (Data structure and algorithm)
        复杂场景代码解决方案                                   fuza

        JsonTest
        JdkStream


    8.注意点及解决                                            EnterprisePoint
    9.单元测试                                                junitTest
    10.性能                                                   fast
    11.提交代码                                               checklist
             - 规范性、安全性、健壮性...
    12.问题定位解决                                           problemSolve
    13.源码阅读提升                                           Source
    14.微服务设计                                             microService
    15.构建与部署                                             DevOps项目
    16.内功 -数据结构算法、jvm                                structjvm
    17.面试                                                   ms
    18.道                                                     route

    命名    naming.java
    工具类  utils.txt
    快捷键：shell


前置处理
处理
后置处理

参考：
        github
        processon
        本地图片、书籍目录：C:\LifeAndWorkTodo
        awesome-list:https://github.com/ityouknow/awesome-list




