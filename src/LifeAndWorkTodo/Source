源码学习三阶段
    1.框架使用，高级使用，项目中落地 参考codeImpl
    2.查看设计架构，F6（自动断点）查看核心流程，设计模式   --- mybatis:MybatisMain.java / springmvc:VolidateController+boot.SpringBootApplication.java+postman /
     1.业务场景考虑不全面、领域知识(timeout、cache....)
     *          2.代码安全性、前置校验....质量低
     *          3.对代码四大特性、六大原则、23种设计模式场景运用不灵活
    3.自己写
            1.最原始实现，无需将每个版本都敲出来，想清楚在写
            2.


------------&&&&&&&&&&&     所有的东西都是一个map,如何和框架对比 &&&&&&&&&-----------------------



3.源码
          阅读源码难原因 1.基础不够实践不够  2.不知道使用场景和问题(见得多了不同之间汇通) 3.实现-模式优雅
           体会其中的取舍，解决思路，技术的综合使用，反射使用
           spring：C:\Users\73699\Desktop\think\框架学习认识使用思考\spring  +  沽咆笔记
           /mybatis/dubbo/
           web中间件 C:\Users\73699\Desktop\think\极客时间\50-深入拆解Tomcat & Jetty/
           消息中间件 mq思考
           引擎：工作流/规则..


-------------mybatis---------前提：学会使用，并且提出问题。也就是看的重点----------------------
0.问题：


1.环境搭建
2.写main类，并直接使用mybatis api 完成后台调用逻辑。为后续debug提供基础
     ----以上步骤通常是在第一阶段整合对应代码时已经有了对应的例子，所以可以直接借助对应的test，而无需重新在搭建
     ----注意的是：这里在mybatis 源码上加入了spring的整合、springboot的自动导入。阅读源码先排除掉这部分
     ----*****打开可以调用的工程比如这里的mybatisMain.java, + 源码项目(可以是引入的jar) + 优秀的博客导读( 从整体--debug )******-------
3.Java架构-Mybatis源码正确打开方式 :https://juejin.im/post/5c04e6325188252e4c2e94ca
        1.是否需要绑定源码  无需  idea自带反编译插件  直接断点
        2.断点不执行  注意是否取消了debug.注意做下角设置 https://blog.csdn.net/u010325193/article/details/81063735
        3.断点打在哪里？ 直接F6就可以一步步走下去
        3.其实这些框架也是像自己整理的流程一样，设计 - 流程 - 编码 .... 这里的流程需要借助官网和别人博客，类设计。注意不要将流程和代码实现混着，造成阅读困难。这是两个步骤
                1.架构图
                2.流程图  -
                3.类图  - 肯定是站在流程场景分析完全，统一设计了类图，并使用合适的模式
                    1.调用 为什么都用代理？结果为什么都用wrapper...，这些属性如何设置？
                    2.idea查看类图  -- 类之间的关系源码中复杂的
                            1.show diaglog 注意继承(单一)和依赖(包括组合、构建出来的关系.)
                            2.不会智能的显示所有的流程上的类关系，因为他不知道流程，所以根据自己认识添加类 - 空格，再去查看对应关系
                不涉及数据库，但有的源码涉及，比如bpm...



1.spring源码
        1.Spring|容器初始化流程及源码分析 - refresh() - https://www.jianshu.com/p/32dacf644062
        2.spring扩展点、event 、listner
        3.实例化 + 初始化  截图
        4.Spring IoC源码学习：finishBeanFactoryInitialization 详解  各个方法详解：https://blog.csdn.net/v123411739/article/details/87907784
        5.spring aop  思考：动态代理  aspectj  代理模式  pjs仿真 事务 - 数据库  https://blog.csdn.net/v123411739/article/details/106065748
        6.springmvc dispatcher / delegate  handler 真正解决当前问题 doxxx resolver解析，装饰 https://blog.csdn.net/win7system/article/details/90674757
        7.spring+springmvc中设计模式


2.validator源码
        1.group、正则 、自定义注解
        2.源码套路类似 定义高级接口 - 工厂(集合了配置文件confire..)-xxor - .方法 或者on 、 do ..
            Validation.buildDefaultValidatorFactory()
                    .getValidator()
                    .validate(user, new Class[0]);
            方法中调用xxmanager 该manager来自hibernate  createValidator

          	 ValidatorFactoryImpl - 212行 - 查看每个
          	 ValidatorImpl  public ValidatorImpl(ConstraintValidatorFactory constraintValidatorFactory, BeanMetaDataManager beanMetaDataManager, ValueExtractorManager valueExtractorManager, ConstraintValidatorManager constraintValidatorManager, ValidationOrderGenerator validationOrderGenerator, ValidatorFactoryScopedContext validatorFactoryScopedContext) {
          								.validate()

          	当想下无法找到时，猜测、或者从已知的实现中反推 - 可能因为设计模式导致不是简单的x.xx()所以找不到、或者debug。。抓住核心方法 validate 思考流程图不是树形
          	validationSuccessful 命名 只意 。 先从主线开始
          	this.validateConstraints(executionContext, valueContext, constraintViolations);

          	ConstraintTree.validateConstraints 一定不要小看一行，因为源码中可能错过了一个入口 ConstraintTree.validateConstraints()

          	自定义validate注解：Spring Boot之Validation自定义实现总结  https://blog.csdn.net/blueheart20/article/details/88817334

-------------
1.源码中接口和抽象类、类多重继承结构
2.JdbcTemplate不是模板方法 实则是门面模式。session...query等就是实现逻辑接口
3.源码中Abstarctxxx抽象类，模板方法
4.当manager 静态create创建返回对象。这样就避免了spring和new.其实也可以spring比如jdbcTemplate.不会像
  工具类那样一个static xx就可以解决，因为manager是个子系统加载要素。RedisTeplate
5.spring框架的cacheManager接口着重是解决不同的缓存是实现的。我们这里定义自己的门面保存 我们项目中
  对外提供的综合

--二者有个cacheName - 服务定位模式  vs 反射  https://www.runoob.com/design-pattern/service-locator-pattern.html

模板方法 abstract...定义默认固定实现

复杂：时序图 多个对象间调用

1.策略 缓存名称-枚举。启动加载时指定缓存方式 redis....
  通过传入的context(strage xx)完成  https://www.runoob.com/design-pattern/strategy-pattern.html
  spring启动从配置文件读取


1.工厂 vs ioc
	IOC的实现原理—反射与工厂模式:https://blog.csdn.net/fuzhongmin05/article/details/61614873


1.层设计
   mvc:https://draveness.me/mvx
       https://www.runoob.com/design-pattern/mvc-pattern.html
   今日头条：对外接口封装层....没有什么是加一层解决不了的
	 前后端分离 - 职责





1.

1.自定义注解扫描器：https://blog.csdn.net/Dongguabai/article/details/81702958
										https://blog.csdn.net/russle/article/details/85042351
			---反射和注解、枚举等api关联巩固
2.mq类似redis这样使其可行性，以及xml模块这里 第四阶段根据接口文档设计
		  ---callBack 监听器模式 - aop
      ---模板方法



数组、list/二维。。。等更加灵活但没有bean直观。易扩展
