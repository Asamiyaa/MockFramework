--------------------核心模块 -模型------------------------------
1.应用模型
        1.银行核心系统设计  src/LifeAndWorkTodo/photo/核心系统功能目标.png
        2.24小时系统动账处理

2.领域模型DDD vs 微服务 
                
        0.DDD vs 微服务：设计模式｜领域驱动设计:https://mubu.com/doc/explore/27721
		DDD与微服务的关系是什么？
		DDD是⼀种架构设计⽅法，微服务是⼀种架构⻛格，两者从本质上都是为了追求⾼响应⼒，⽽从业务视⻆去分离应⽤系统建设复杂度的⼿段。
		两者都强调从业务出发，其核⼼要义是强调根据业务发展，合理划分领域边界，持续调整现有架构，优化现有代码，以保持架构和代码的⽣命⼒，也就是我们常说的演进式架构。
		DDD与微服务的区别是什么？
		    DDD主要关注：从业务领域视⻆划分领域边界，构建通⽤语⾔进⾏⾼效沟通，通过业务抽象，建⽴领域模型，维持业务和代码的逻辑⼀致性。
		    微服务主要关注：运⾏时的进程间通信、容错和故障隔离，实现去中⼼化数据管理和去中⼼化服务治理，关注微服务的独⽴开发、测试、构建和部署。
                DDD是【更高的业务和代码抽象，使其统一，有生命】。所以这些准则实质是在原来编码准则：单一职责/隔离/扩展/组合/继承...基础上的和业务的柔和
                聚合根：就相当于模块的manager,作为聚合管理每个小的上下文

                事件总线是实现微服务内聚合之间领域事件的重要组件，它提供事件分发和接收等服务。


1.数据模型          -- 为tableDesign基础
        1.流水模型
        2.订单模型
        3.历史模型
        4.树模型
        5.登记中心模型    path:src/LifeAndWorkTodo/photo/常用数据模型.png  src/LifeAndWorkTodo/photo/业务到状态机过程中前转状态引出业务嵌套深度.png
        6.权限模型

  缩写：https://www.iteye.com/blog/lihaiming-2317036
      Java各种对象（PO,BO,VO,DTO,POJO,DAO,Entity,JavaBean,JavaBeans）的区分：https://www.cnblogs.com/lyjin/p/6389349.html
      api模块中虽然vo和bean是一样的，beanUtils.copy进行复制，并且对多的属性进行处理塞入，对属性不同的
      转化，service层进行处理。。暴露层 翻译层

      透传 - 下游 - 接数
      客户号- 账号 维度....


TODO:《极客时间王争-设计之美 理解模型原则，取舍，技巧 注意事项 6大原则  这些也是设计模式、框架源码对领域抽象基础》

2.  《数据模型资源手册卷1》
    《数据模型资源手册卷2》
    《数据模型资源手册卷3》未下载

     第一卷讲一些通用的数据模型，比如个人与组织，产品，订单，订单配送，发票，财务，人力资源等。
     卷二是一些特定行业的数据模型，在卷一的基础上会有所变化，比如制造业，电信，金融，保险，医疗，旅游业，电子商务等。
     卷三讲的有点类似于设计模式了，作者对数据模型的抽象程度做了分类，对卷一提到的各种数据模型在不同的抽象程度下设计出来的数据模型做详细的分析，据此比较容易看明白卷一和卷二中作者设计的思路。

     看完这三卷之后我目前印象还比较深的有三个模块，一个是个人与组织，一个是联系方式，一个是业务规则。
          个人与组织被抽象为party，这样的好处在我们公司的CRM中应该会比较明显，我们公司的会员中既有组织又有个人，
          我们公司的代理中也是既有组织又有个人。目前的逻辑是认为会员表中都是个人，代理表中都是组织，实际上有很多例外情况。
          联系方式，卷一和卷二给出了抽象程度比较高的模型，把电话，手机，email，qq，通信地址等抽象为一种“通信机制”。
          抽象程度比较高的话，扩展性会好一些，与其他实体的关联会简单一些。比如party的联系机制，只需要一个表就可以了。
          我们公司的会员表中用的是抽象程度最低的做法，会员表中直接有一列叫BP机号码。新做的客史项目抽象程度高一些。

        业务规则，可以把不同行业的不同的业务规则容纳进来。我看过这个模型之后发现我们公司酒店业务用的rateplan，机票系统用的运价，都可以用这个业务规则实体来表示。
