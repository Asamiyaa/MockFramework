高级常见面试题：https://blog.csdn.net/Butterfly_resting/article/details/89637697
             https://blog.csdn.net/ThinkWon/article/details/104397299


final 回顾 - 面试模拟
    springboot - spring -springmvc - jvm ( 都是对对象的管理 )
    mybatis 一条sql从应用到数据库orm、以及数据库sql 执行流程     src/LifeAndWorkTodo/photo/mybatissql执行流程.png
    sql
    rocketmq 分布式事务
    redis
    dubbo
    jdk  hash / 算法  https://juejin.im/post/6844903633914445837#heading-22 /多线程 ThreadMain.java
    设计模式
    生产问题解决

    状态机:1.状态流转  2.时序校验  3.业务可达性   4.历史(业务嵌套) 5.解析器
    排序算法：
    单例：
    线程场景实现：

1.IO
    1.IO NIO 阻塞 同步 https://www.cnblogs.com/dolphin0520/p/3916526.html
    2.Netty  https://juejin.im/post/6844903703183360008
            1.netty实现简单http服务器   https://blog.csdn.net/huangshanchun/article/details/78302602
    3.tcp udp :https://blog.51cto.com/feinibuke/340272
    4.三次握手四次挥手  https://blog.csdn.net/guanghuichenshao/article/details/81916277
        http 的问题，为什么是无状态的，状态码，session，cookie，cookie 大小限制是多少
    5.tcp\http

2.异步
    1.同步转异步 https://blog.csdn.net/qq_32447301/article/details/90322555
    2.concurrentHashMap使用场景及错误使用 https://blog.csdn.net/zero__007/article/details/49833819
        问题1：不清楚一个流程执行中哪些是原子的，哪些不是
           2：多个线程这种干扰到底存在几种，很乱，很多。
    3.SimpleDateFormat线程不安全：https://blog.csdn.net/csdn_ds/article/details/72984646

3.jdk
    1.hashMap和concurrentHashMap
    2.值传递 vs 引用传递

4.collections
    1.集合中删除元素

5.算法
    1.各个数据结构选择  https://juejin.im/post/6844903633914445837#heading-2
    1.字符串反转 https://www.cnblogs.com/JohnTsai/p/5606719.html
    2.java 中 怎样才能打印出数组中的重复元素

6.设计模式
    1.adapter 充电器 为什么不直接引用接口而是需要适配，引用同样可以实现内部调用实现呀
    2.给我一个符合开闭原则的设计模式的例子
            策略模式，如果你需要一个新的策略，只需要实现接口，增加配置，不需要改变核心逻辑。一个正在工作的例子是
            Collections.sort() 方法，这就是基于策略模式，遵循开闭原则的，你不需为新的对象修改 sort() 方法，你需要做的仅仅是实现你自己的 Comparator 接口。


7.数据库 - sql  https://thinkwon.blog.csdn.net/article/details/104778621   + TableDesign
    1.表的建立
        0.模型 1.三大范式 2.什么时候使用联合主键
                第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解；
                第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性； 部分依赖
                第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。 传递依赖

        1.主键
                1.自增   2.业务  3.uuid  4.分布式主键
        2.表空间
        3.约束  唯一性  索引、非空、
        4.类型  一定要保持一致，不要在多个实体之间转换
        5.长度

    2.sql编写  ( 千万不要头脑风暴，要注意使用就像写模块一样要有流程，写取那个，再取那个....最后再优化)
        1.正确性（函数-展示字段if判断逻辑）
         - 完整性（union 不同维度数据(查看录入不同形式)..）、
          非脏性(distinct\ is not null..) -
          性能(join in exist 子查询 索引 返回值 过滤顺序 查询逻辑)
        2.<effective sql>

    3.锁 - 事务



    5.定位
        1.执行计划  sql执行过程
        2.优化
            1.sql优化
                1.sql语句
                2.索引
                3.
            2.数据库优化

    4.分库分表


    6.面试
        1.引擎：MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址(非聚集索引)  叶节点data域保存了完整的数据记录(聚集索引)
        1.索引 - hash B B+
        2.主从备份
        3.一条sql执行过程
        4.执行计划
        5.优化
        6.乐观锁 悲观锁
        7.分库分表实践 https://tech.meituan.com/2016/11/18/dianping-order-db-sharding.html 后遇到的问题事务支持、跨库join 跨节点的count,order by,group by以及聚合函数问题  id
                查看https://thinkwon.blog.csdn.net/article/details/104778621最后几行
        8.行列互换 https://blog.csdn.net/jackfrued/article/details/45021897
        9.sql建议：https://database.51cto.com/art/202003/613133.htm
        10.mysql binlog ..

8.流程
    1.浏览器输入一个域名开始，到显示页面，中间发生了什么

9.业务难点


10.redis
    1.缓存 CacheManager.java -
    2.系统学习 Redis:https://juejin.im/post/6844904111205253134 + 命令+代码调用
    3.分布式锁 ：https://juejin.im/entry/6844903545339133959
    4.lua脚本  提高i灵活性将判断逻辑放到redis server端 而无需client
    5.Redis集群下的RedLock算法(真分布式锁) 实践  https://cloud.tencent.com/developer/article/1523004

    1.code -字典、营业日、日历、时序... 2.session 3.到期记录 常查询  4.分布式锁-防重  不允许写入  日终跑批

************************************
分布式下问题(mq/dubbo不同解决方案)：
    1.分布式一致性等：Kmain AmqMsgContainerFactory(activemq) - DefaultProducercodeImpl
        D:\Data\mySrc\MockFramework\src\LifeAndWorkTodo\photo\rocketmq分布式事务半消息实现.png

    2.MQ消息最终一致性解决方案  https://juejin.im/post/6844903951448408071
        1.链路长，并且增加了网络，mq等其他组件导致一致性复杂(注意可能出问题节点)，所以增加操作状态 ：预发送、定时回查...
        2.代码需要如何保证ack判断 发送和消费都是如何在自己处理后发送呢？？？？
            https://www.cnblogs.com/wuzhenzhao/p/11504941.html  代码实现 先保存本地保证，返回消费成功给mq
            https://blog.csdn.net/qq_35362055/article/details/81560388
        3.整个流程 发送方保证+mq保证+consumer保证 = 一致性
        4.只保证通讯级别不保证业务级别，消费者抛出npe,那么事务是不一致的


11.rocketmq + 消息的组拼解析(xml/bj银行 head头每个字节代表什么..解析) + 接口归范的理解和编码
    1.《浅入浅出》-RocketMQ -扫盲 : https://juejin.im/post/6844904008629354504#heading-10
       mq场景 配置 使用：https://www.cnblogs.com/joylee/p/8916460.html
                       https://juejin.im/post/6844903696577331208

    十分钟入门RocketMQ：http://jm.taobao.org/2017/01/12/rocketmq-quick-start-in-10-minutes/
                      https://chestnutheng.cn/2019/09/04/rocketmq/

    2.默认配置
        1.rocketmq的重试队列和死信队列  https://www.jianshu.com/p/1281f7fee69c
        2.发送/消费 防丢失、顺序性、重复性是mq控制还是系统还是配合
          mq:可以保证顺序性和至少消费一次：RocketMQ  一个topic下有多个队列，为了保证发送有序，RocketMQ提供了MessageQueueSelector队列选择机制Hash取模法，
          MetaQ主要使用了拉模型，解决了顺序消息和海量堆积问题；Notify主要使用了推模型，解决了事务消息；

    3.源码 - 解决mq内部处理逻辑
        1.从RocketMQ源码了解其系统设计:https://juejin.im/post/6856205024717897742
        2.https://developer.aliyun.com/article/759659
          https://juejin.im/post/6856205024717897742
        3.RocketMQ源码解析：https://juejin.im/post/6844904166247104519

    4.设计模式
        1.通信层设计模式：https://zhuanlan.zhihu.com/p/103915220
        2.

    5.问题和调优
        队列堵了:  https://juejin.im/post/6844904199667318798
        消费消息是push还是pull？RocketMQ没有真正意义的push，都是pull，虽然有push类，但实际底层实现采用的是长轮询机制，即拉取方式
        为什么要主动拉取消息而不使用事件监听方式？
            事件驱动方式是建立好长连接，由事件（发送数据）的方式来实时推送。
            如果broker主动推送消息的话有可能push速度快，消费速度慢的情况，那么就会造成消息在consumer端堆积过多，同时又不能被其他consumer消费的情况。而pull的方式可以根据当前自身情况来pull，不会造成过多的压力而造成瓶颈。所以采取了pull的方式。

        堆积时间过长消息超时了？
        RocketMQ中的消息只会在commitLog被删除的时候才会消失，不会超时。也就是说未被消费的消息不会存在超时删除这情况。

        追问：堆积的消息会不会进死信队列？
        不会，消息在消费失败后会进入重试队列（%RETRY%+ConsumerGroup），18次（默认18次，网上所有文章都说是16次，无一例外。但是我没搞懂为啥是16次，这不是18个时间吗 ？）才会进入死信队列（%DLQ%+ConsumerGroup）。

        面试题:https://www.cnblogs.com/javazhiyin/p/13327925.html


12.zookeeper 协调框架
    1.原理
    2.分布式锁


12.源码

13.dubbo、SpringCloud这块
    0.bilibili dubbo使用教程
    1.架构图(不同颜色的线代表调用暴露流程以及所属)  src/LifeAndWorkTodo/photo/dubbo-framework.jpg
    2.时序图   https://blog.csdn.net/xinfei0803/article/details/80079613(源码时序图就像多个系统协作完成，我们的是不同的系统给比如额度信贷这里对象就是对这些的抽象 职责)
    3.源码：https://juejin.im/post/6844903799832707079
    4.spi
        1.为什么其他框架没有呢：dubbo除了提供多种配置选择外还自定义-替换，实现指定接口由如何让dubbo识别且这些替换是替换了
                            dubbo核心处理逻辑 --其他框架mybatis..等似乎没有替换核心
    5.面试题：
        1.简述服务暴露和引用过程
        2.集群容错几种 以及场景：https://juejin.im/post/6844903806841405454
          负载均衡：https://juejin.im/post/6844903806841405448
        3.如何异步转同步：https://juejin.im/post/6844903806845583374
          同步转异步与请求降协议：https://blog.csdn.net/qq_32447301/article/details/90322555

    6.设计模式


14.maven
    1.打包 - 部署
    2.依赖冲突

15.springboot
    1.启动加载
        1.http://tengj.top/2017/03/09/springboot3/
        https://blog.csdn.net/Liuqz2009/article/details/104858353
        https://blog.csdn.net/weishuai528/category_8996076.html

            1.配置文件解析 http://tengj.top/2017/02/28/springboot2/
            2.启动原理解析:http://tengj.top/2017/03/09/springboot3/   --META-INF/spring.factory
            3.@Configure @Bean @Service...@Autowire 注解初始化方式和xml区别？  https://www.cnblogs.com/ashleyboy/p/9667485.html  和xml不同，注解是通过后置处理器完成...位置不同
    2.starter
            1.原理：https://blog.csdn.net/weixin_39992480/article/details/97938439  (依赖+配置) 1.配置文件+xml   2.配置文件+starter(默认或者使用配置)  3.配置文件+@Bean 需要逻辑处理不是简单配置
            2.自定义：https://www.xncoding.com/2017/07/22/spring/sb-starter.html

    3.整合  factoryBean的使用...
        1.mybatis:https://blog.csdn.net/qq_31156563/article/details/107448279
    4.springboot
        1.Spring Profiles https://blog.csdn.net/liujun03/article/details/82592929
        2.spring secrity + jwt: https://www.jianshu.com/p/d5ce890c67f7
        3.跨域问题  CSRF 攻击  https://blog.csdn.net/u012373815/article/details/71436415
        4.微服务中如何实现 session 共享  Spring Session + Redis 来实现 session 共享  https://blog.csdn.net/qq_39669058/article/details/90235990

    5.参考
        1.https://blog.csdn.net/ThinkWon/article/details/104397299

16.spring --专注于对象管理
    1.refresh()  -1.beanFactory  2.bean- 创建图(判断缓存...)
            url:https://www.jianshu.com/p/32dacf644062
            D:\Data\mySrc\MockFramework\src\LifeAndWorkTodo\photo\spring初始化.png

        0.spring整合其他框架 -通过factoryBean接口注入   图片 将代理bean
            1.注册其他构造入参作为springbean ,即spring初始化之一(传统的Spring容器加载一个Bean的整个过程，都是由Spring控制的，换句话说，开发者除了设置Bean相关属性之外，是没有太多的自主权的。FactoryBean改变了这一点，开发者可以个性化地定制自己想要实例化出来的Bean，方法就是实现FactoryBean接口。)
                正常时通过解析为beanDefinition...现在是直接有我们来创建，通过此注册到spring
            2.factoryBean：解析过程：https://blog.csdn.net/zknxx/article/details/79572387
            3.查看改接口的子类有多个，比如Activemq.... 区分@Bean 只是可以定义入参，创建对象还是由spring完成

        1.jdbc统一管理



    2.扩展接口 属性....都是在实例化的时候完成的  ***其中的图：https://www.jianshu.com/p/a854e23d88dd
        0.实例化 调用无参构造器，成员属性... 这里无参中只能做自己对象简单事，利用spring下面接口可以获取整个容器信息
        1.aware 对象初始化时需要依赖‘感知’  -- beanName、BeanFacotry、ApplicationContextAware
        2.beanPostProcessor 是全局配置，每个bean初始化时都查看改列表。作为aop...等全局配置。。前后置(初始化下面)处理 postProcessorBeforeInitialization()....
           aop场景：https://blog.csdn.net/baidu_20876831/article/details/78956220
        3.InitializingBean和init-method 属性设置完成后做的事情，比如方法调用，cache初始化 --springboot的ApplicationRunner
          afterPropertiesSet-ActiveMqConnectionFa...
          destroy...释放信息...
        4.3之后执行2的后置处理

    3.循环依赖 初始化过程中有一步设置对象属性：通过三级缓存解决  ：https://cloud.tencent.com/developer/article/1497692
                    原型模式出现循环依赖：不能解决报错  https://www.cnblogs.com/jajian/p/10241932.html
                    构造器依赖  当前正在创建池  https://www.cnblogs.com/jajian/p/10241932.html

    4.spring事务：为了解决业务层方法之间互相调用的事务问题 - 除bean之外另一层面 - a()-->b()各自情况笛卡尔积 [aop+db]
           https://juejin.im/post/6844903608224333838
           PROPAGATION_REQUIRED ：统一一个事务
           PROPAGATION_REQUIRES_NEW:新开启一个事务 即当前方法的执行不影响主流程，比如保存日志(多个表才有事务意义)....
           PROPAGATION_NESTED：嵌套事务 其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。
                               部分回滚

           回滚规则：事务只有遇到运行期异常时才会回滚，你还可以声明事务遇到特定的异常不回滚，即使这些异常是运行期异常。(场景)

           源码：DatasourceTransactionManager
                1.整合connection -> db.. 2.实现initialzingBean 校验设置  3.写的整洁，高内聚低耦合  4.xxxholder

           事务失效场景：

           分布式事务：

    5.spring设计模式
        1.

    6.池化 https://blog.csdn.net/zjpopo/article/details/101099298 只有真正涉及到网络-连接池、线程资源-线程池  vs 单例
        1.本质就是创建一个list..将new Connection(xx,xx,....) 对象创建了放进去 -- GenericObjectPool common-pool

    7.解决企业级应用开发的业务逻辑层和其他各层的耦合 解决企业级应用开发的复杂性
      IoC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。

    8.springmvc
        1.一个url执行流程

    9.arthas同样集成了spring的instrument模块完成对spring的监控和植入处理

17.mybatis - menu.TableDesign - 《effectiveSQL》-
    1.${}/#{} https://www.cnblogs.com/shar-wang/p/11614722.html
     - 动态sql :if、choose、when、otherwise、trim、where、set以及foreach  https://blog.csdn.net/u012702547/article/details/55105400
            - 本质就是将代码中对sql条件的判断下沉到sql编写上。最主要的if和foreah-批处理 batch

    1.源码 :https://my.oschina.net/zudajun?tab=newest&catalogId=3532897
        1.SqlSessionManager 1.jdk动态代理 没有想的那么复杂，就是将调用逻辑进行（增强-aop-事务)，这里对sqlSession 判断有无 - 动态代理：https://my.oschina.net/zudajun/blog/666223
           xxxTemplate -xxmanager - defaltsql...  只有defaultxxx进行真正mappedStatement真正对配置文件
           解析就像spring中的beanDefinition一样 。赋值给executor执行
        2.threadLocal ?? 如何保证线程安全的
        3.executor
        4.方法不支持重载，不同的namespace下id不同get有问题，因为mybatis同一key存放了两份其中一个是全类名 使用绑定Mapper接口调用方法，因为它总是转换为full name调用。（Mybatis最佳实践，推荐）
        5.incomplete对于元素在当前元素下面时，状态，返回来设置。类似于spring的三级缓存  -parsePendingElement
        6.TypeHandler - converter...

    2.聊聊MyBatis缓存机制 :https://tech.meituan.com/2018/01/19/mybatis-cache.html
    3.面试题：https://my.oschina.net/zudajun/blog/747682
    4.设计模式


18.springmvc
    1.委派模式
    2.转发和重定向区别  https://blog.csdn.net/u013041642/article/details/72190223

19.多线程
    1.代码行之间、api操作期间如何判断是否是原子操作，不是的话不是都可以笛卡尔积吗？那样混乱如何写出正确的代码呢？
    2.simpleDateFormat https://blog.csdn.net/csdn_ds/article/details/72984646
    3.实战使用   百度网盘 多面手
    4.使用场景：https://www.zhihu.com/question/65200684

20.性能优化 -- 实战
    0.发现瓶颈：https://blog.csdn.net/shan9liang/article/details/24035001
    1.一般项目常用性能调优方法
        1.https://blog.csdn.net/shan9liang/article/details/50152393
        2.https://blog.csdn.net/shan9liang/article/details/50241449
        3.https://blog.csdn.net/shan9liang/article/details/50726455
    2.tomcat
        1.从 0 开始手写一个Tomcat，7 步搞定！https://cloud.tencent.com/developer/article/1378719
        2.tomcat和web关系：https://blog.csdn.net/tjiyu/article/details/54590258

        1.https://blog.csdn.net/shan9liang/article/details/43992717
        2.https://blog.csdn.net/shan9liang/article/details/42180953
    3.数据库
        1.https://blog.csdn.net/shan9liang/article/details/39379391
        2.https://blog.csdn.net/shan9liang/article/details/7526049
    4.缓存
        1.https://blog.csdn.net/shan9liang/article/details/28869375
21.问题定位
    1.记一次PermGen持续增长的解决过程 https://blog.csdn.net/shan9liang/article/details/45403091
    2.记一次MessageQueue的优化  https://www.cnblogs.com/EminemJK/p/9921800.html

---------------实战-------------------------
---------------需求和问题排查都需要在交流和危机下有强大的信心，不要慌不要慌不要慌。都是对综合实力的考察，都是成长必经之路
                相信你可以拯救他，可以设计好他---------------------

----必读-----拿到需求我如何一步步开发为代码------
22.需求分析 - 思考+交流+确认 反复 邮件 定板  -- 针对事而不是人  --人性  ***重要的，每次分析都要去读 去理解   --- 建筑师
        1.process.java+本地process文件夹书籍内容
            1.需求(价值观+业务支撑+交流)：关于需求分析的具体方法、流程、工具等事项：https://www.zhihu.com/question/20407032  *** 横切、纵切  切忌一蹴而就，但必须保证核心流程没有问题+权衡
                  场景 --> 演化为流程分支(业务逻辑 因为后面有代码逻辑分支是满足业务逻辑分支的)

            <领域驱动设计：软件核心复杂性应对之道>
            2.领域=相关知识体系(业务支撑+领域知识便于后面系统)：合并和抽象  找名词+加属性+连关系+加行为（前要满足需求后要满足设计）+ 本地modelAndTable
                面向领域驱动编程是强化对象概念，使其在业务分析、流程梳理中更加方便，弱化原来的贫血模型(过渡关注表而使大量处理逻辑放到service庞大)
                领域之间不明确导致架构腐化。。。。但这些都没有改变本质  = 业务领域 + 通用领域

                向梳理源码这些其实这些都是领域知识，抽象为了类。1.是领域划分(类)  2.层级之间调用 虽然没有db但是每个类的作用明确  3.要解决问题不同场景
                            4.多重实现选择 n+1  rockemq解决mq相关问题  spring....

                一定程度上参考已有的表设计：业务字段 +version+时间+状态+操作状态+外键+嵌套层数(本地关系需要)+历史拉链...流水+订单(消费 推拉模型 核销)
                领域之间的映射  技术开发人员(实现否则模型无法高可用落地)+领域专家(实际业务否则模型幼稚) ---> 共同完成
                领域模型的不断精化迫使开发人员学习重要的业务原理，而不是机械的进行功能开发。领域专家被迫提炼自己所知道的重要知识完善其自身理解，并渐渐理解
                软件项目所必需的的严瑾性。

                抽象 合并流程(通过字段还是流程...)

                开发人员和领域专家通过一步一步的使用模型对象来走查场景

            3.设计 《设计模式之美》 绑定模型和实现  合并为Abstractxx，引用set 父类 。 是否对所有流程、场景结合软件进行归并
                将领域类映射加入软件设计原则  - 应用设计原则和设计模式 - 辅助类
                双向引用就是代码中xxx.add(this) 操作自己
                uml思考：类图、状态图...https://blog.csdn.net/qq_35495763/article/details/80764914  在关联上添加约束 非null.单项...
                ‘ 简化-无关的一笔带过不需要实时 ’和 ‘ 约束-必要的要重点控制不能忽略 ’模型关联是通往必经之路
                service --对应接口 查看InterfacePoint ,也是行为，区分领域模型中实体的操作是和接口无关的是实体自己的。行为是多个实体的
                        工作协作，但现在瘦血模型中，弱化了实体模型，面向过程编程导致 setxxx ，修改方法 全部依赖对 ‘流程’的理解，没有做到
                        真正隔离。。领域对象需要关联其他对象。不能简单和db映射。

                        当领域中的某个重要的过程或者转换操作不属于实体或者 ' 对象自然职责 '时，应该在模型中添加一个作为独立接口的操作，并声明
                        为service.是无状态的

                 module:将一些一起考虑的类放在一起，如果说模型讲述了一个故事，那么module就是这个故事的各个章节

                 规则引擎：一个包含知识的领域模型可能会含有一些显示的规则，然而对象范式却缺少用于表达规则和规则交互的具体定义。所以引入规则引擎
                            数据和规则保持联系

                 TODO:<领域驱动设计：软件核心复杂性应对之道>第七章：一个使用领域模型的示例 一步一步  + 后面的章节 重构理解
                        结合<面向对象葵花宝典、思想技巧和实践>

            4.实现
                5-1-8:  when where who what why  how  性能Performance-成本cost-time-可行性reliability 安全性 合规性 技术性  兼容性
                28原则
                每个模型阶段时间分配，最后总结和复盘。
                方法重构、命名重构、将方法重构到模型中 comparetO...其他  <重构> --但是要合理，现在的自己为了重构导致乱传参数判断是不合理的。
                丑陋的

           --- 影响性分析***对老流程的影响，必须*****
           --- 反向加深学习，逐步擅长，不是说不是自己负责就不管，应该在保证自己模块基础上，逐步向其他深入

        2.原型图
            uml:https://blog.csdn.net/shan9liang/article/details/6705728
              https://blog.csdn.net/shan9liang/article/list/8


--------给一个系统定位排查问题的时候，
                心态、
                知识、经验是关键(设计面广，链路，硬件、网络、中间件 jvm....)，
                数据是依据(流程 业务)，
                工具是运用知识处理数据的手段(快速定位)、
                最终处理方案、
                总结


--------不停分析线索，推理的
--------首要任务是恢复系统，真相永远只有一个
 23.问题定位解决 （编写代码的逆向思维思考处理问题）-- 不是让你慢悠悠的熟悉整个流程，是让你去解决问题，快。准。狠 - ----医生
     别人总结
          ****救火必备！问题排查与系统优化手册：https://developer.aliyun.com/article/767550
          ****你所需要掌握的问题排查流程  ：https://www.cnblogs.com/jinjiangongzuoshi/p/10502334.html
          一份阿里员工的Java问题排查工具单：http://www.jiangxinlingdu.com/thought/2018/11/17/javatools.html

          ****一文搞懂性能测试常见指标：https://www.cnblogs.com/jinjiangongzuoshi/p/11793303.html
          arthas使用


     自己总结 - 不全
        0.最近是否有变更该部分内容
        1.业务代码抛出报错  - 代码查看抛出地点 查看抛出条件核对( 数据+sql )
        2.系统异常或者反映  - 查看日志 - 日志重要性 - 临时解决方案
        3.单笔：数据模拟+代码不严谨导致  测试环境复现 - 代码debug  vs 远程debug btreace脚本  debu过程中通过debug修改跳过外部条用或者数据不正常，完成核心流程
        4.大范围 - 链路排查(   看似简单实质是对广度深度逻辑的考察  )
            1.重要节点  比如mq  jvm  数据库  网络
            2.系统异常   CPU 占用率过高、CPU 上下文切换频率次数较高、磁盘满了、磁盘 I/O 过于频繁、网络流量异常
            3.业务服务异常   PV 量过高、服务调用耗时异常、线程死锁、多线程并发问题、频繁进行 Full GC、异常安全攻击扫描

            保存数据和现场
            代码中开关：关闭对外界调用
            perform项目只是对简单的命令进行测试，上面才是对整个问题产生，排查的根本。自己了解只是一部分

    ===测试 ：必须将所有的‘分支场景测到包括嵌套 这些都是在编写时就应该思考的，返回值，异常值.... ’ + ‘’




 23.需求分析 - 设计 - 开发 -维护  https://blog.csdn.net/shan9liang/article/list/8
 https://blog.csdn.net/shan9liang/article/details/6662154
    顶级程序员工具集:https://www.cnblogs.com/aobing/p/11930859.html

24.jdk8