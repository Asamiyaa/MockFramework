https://www.processon.com/diagraming/5c1b64a8e4b095ccfee8d4ae

无论是哪个设计，架构、数据库、类..都是在对  ‘ 业务特别了解，对未来发展方向预测；并合理抽象   ’

-1:编码命名归范 缩写：https://www.iteye.com/blog/lihaiming-2317036

1.架构设计  https://blog.csdn.net/hguisu/article/details/78258430

1.如何编写工具类：JaxbUtil.class

2.设计表结构：RuleDo.class + statusDo.class（状态机表 - 未考虑字段、继承、业务等 -- 需要重新结合看的书写）
        如何编写高效sql: 函数..(好的表设计肯定是设计时就考虑了查询，所以可能有冗余)
        利用数据库主键冲突做唯一控制 分布式下

        转化思路重写sql?

3.类  看的书籍 + 极客时间
     玩具版 - 流程图 这个是和需求紧密的，也必须是无差别正确的。 RuleManager.class + jaxbTest.class
        - 规范性（命名 - 使用第三方类库简化代码 apache-guava ApacheCommonTest.class） 健壮性(前置校验、返回包装、异常分支、日志) 风险(安全、注入)
            - 可扩展(反射+泛型+注解+重构、设计模式 springFathrer.class+ + https://www.processon.com/apps/5dad0672e4b0e43392ee5d41..)
                  - 框架(利用已有框架api扩展 SpringMain 、 注解标识 AnnotationUtils 、 切面、自定义规则配置文件 studentRule -xsd )
                         - 平台（尽可能自动化，参数之间某种关系、各种异常处理）

     是否启用线程
         D:\Data\mySrc\MockFramework\src\test\thread\MainClass

     单元测试  RuleDaoMapperTest.class
           明确修改点 - 局部测试 - 联合测试( debug修改参数值 )


4.问题定位


5.性能优化
