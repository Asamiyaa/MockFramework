人生和技术
        https://www.processon.com/diagraming/5c1b64a8e4b095ccfee8d4ae
        维度

        产品开发经验总结-让你少奋斗一年的经验之谈
            https://www.cnblogs.com/lixinghua/p/9745870.html
        pjs仿真设计


***** 无论是哪个设计，架构、数据库、类..都是在对  ‘ 业务特别了解，对未来发展方向预测；并合理抽象   ’+ 混合编程、全栈编程*****
***** 最后发现，官方文档才是正规的。也是最可以扩展点。可以完全信赖’*****

----------工业化-----------

-1:编码命名归范  naming.class

0.架构设计  https://blog.csdn.net/hguisu/article/details/78258430
   ===> 3.0详设版本1.0 -> 2.0 业务需求文档从业务角度出发 --> 详设从系统，开发角度 泳道图 交互。这种转化也是 ‘代码开发’的依据而不是业务流程图
   ===> 仿真文档自己版  -> 李老师版本  场景全面 - 可行性 - 从简单实例完成到迭代

1.如何编写工具类：JaxbUtil.class

  需求 - 仿真表设计2 从业务需求出发，设计表，保证字段  ---> 反模式+mysql..表架构  ---> 下面的具体实现 ---> 分库分表分布式环境下
   ===> 其实无论是架构还是类，都是从业务-架构-实现往下走，粒度越来越细

2.  1>设计表结构：RuleDo.class + statusDo.class（状态机表 - 未考虑字段、继承、业务等 -- 需要重新结合看的书写）
        如何编写高效sql: 函数..(好的表设计肯定是设计时就考虑了查询，所以可能有冗余)
        利用数据库主键冲突做唯一控制 分布式下
       C:\Users\73699\Desktop\think\极客时间\06-MySQL实战45讲
       C:\Users\73699\Desktop\think\表设计思考\反模式
       C:\Users\73699\Desktop\think\表设计思考\深入浅出MySQL数据库开发优化与管理维护

    2>.sql(转化思路重写sql?)
       RuleDoMapper
       C:\Users\73699\Desktop\think\极客时间\44-SQL必知必会



3.类
     1.-实现版 - 流程图 这个是和需求紧密的，也必须是无差别正确的。 RuleManager.class + jaxbTest.class( 未进行类设计 )
             C:\Users\73699\Desktop\think\复杂业务架构思考\复杂性应对之道 - 领域建模
             C:\Users\73699\Desktop\think\极客时间\98-设计模式之美****
             C:\Users\73699\Desktop\think\极客时间\01-数据结构与算法之美

        每个模块出流程外，涉及一些公共组件，比如流水号生成器

        - 规范性（命名 naming.class - 使用第三方类库简化代码 apache-guava ApacheCommonTest.class） 健壮性(前置校验、返回包装、异常分支、边界、日志、事务) 风险(安全、注入)
                事务：所谓的事务挂起其实就是一个移除当前线程、数据源活动事务对象的过程。
                     事务的本质其实是对数据库自动提交的关闭与开启，传播特性是Spring提出、实现、控制的概念，而隔离级别是对数据库实现的封装。

             C:\Users\73699\Desktop\think\高效实现思考

            - 可扩展(反射+泛型+注解 、重构、设计模式 SpringMain.class+ + https://www.processon.com/apps/5dad0672e4b0e43392ee5d41.. 重构 )

                  - 框架(利用已有框架api扩展 SpringMain 、 注解标识 AnnotationUtils 、 切面、自定义规则配置文件 studentRule -xsd )

                        - 平台（尽可能自动化(1.动态sql即通过if判断拼接条件,)，参数之间某种关系、各种异常处理）


     2>线程 - 异步编程思考(为什么使用线程处理 https://juejin.im/post/5a8fc6345188257a804aa956) 某个节点上异步，内部还是同步
              将接口拆成两个，异步返回、调用者再去查询结果
            SerialNumGenerator
            D:\Data\mySrc\MockFramework\src\test\thread\MainClass
            C:\Users\73699\Desktop\think\极客时间\极客 并发

     3>单元测试 测试驱动开发  手术刀 准确定位  TestRulerDraft.class
           明确修改点 - 局部测试 - 联合测试( debug修改参数值 )

     4>微服务
           拆分：https://www.cnblogs.com/aibabel/p/11214026.html
           治理：

     5>源码
           体会其中的取舍，解决思路，技术的综合使用，反射使用
           spring：C:\Users\73699\Desktop\think\框架学习认识使用思考\spring  +  沽咆笔记
           /mybatis/dubbo/
           web中间件 C:\Users\73699\Desktop\think\极客时间\50-深入拆解Tomcat & Jetty/
           消息中间件 mq思考
           引擎：工作流/规则..


5.问题定位
    1.outOfMemory
    2.空间不足 app / db 表空间
    3.thread deadlock
    4.table lock
    5.mq block
    6.network 抖动

6.性能优化
