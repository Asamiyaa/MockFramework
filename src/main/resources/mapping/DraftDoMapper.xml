<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.core.rule.dao.DraftDoMapper">
    <!--
        默认是set注入 ，也可以参考下面的构造注入
        一般来说，很少改变或基本不变的包含引用或数据的表，很适合使用不可变类。 构造方法注入允许你在初始化时为类设置属性的值，而不用暴露出公有方法。
    -->
  <resultMap id="BaseResultMap" type="com.core.rule.bean.dataObj.DraftDo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="draftNo" jdbcType="VARCHAR" property="draftno" />
    <result column="draftDescribe" jdbcType="VARCHAR" property="draftdescribe" />
    <result column="draftTemplate" jdbcType="LONGVARBINARY" property="drafttemplate" />
  </resultMap>

    <resultMap id="compositResultMap" type="com.core.rule.bean.dataObj.CompositDTO">
        <result column="draftNo" jdbcType="VARCHAR" property="draftno" />
        <result column="property" jdbcType="VARCHAR" property="property" />
    </resultMap>

    <!-- 充血模型的映射   详见官方文档

      constructor - 用于在实例化类时，注入结果到构造方法中
    idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能
    arg - 将被注入到构造方法的一个普通结果
    id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能
    result – 注入到字段或 JavaBean 属性的普通结果
    association – 一个复杂类型的关联；许多结果将包装成这种类型
    嵌套结果映射 – 关联本身可以是一个 resultMap 元素，或者从别处引用一个
    collection – 一个复杂类型的集合
    嵌套结果映射 – 集合本身可以是一个 resultMap 元素，或者从别处引用一个
    discriminator – 使用结果值来决定使用哪个 resultMap
    case – 基于某些值的结果映射
    嵌套结果映射 – case 本身可以是一个 resultMap 元素，因此可以具有相同的结构和元素，或者从别处引用一个

      -->
   <!-- <resultMap id="detailedBlogResultMap" type="Blog">
        <constructor>
            <idArg column="blog_id" javaType="int"/>
        </constructor>
        <result property="title" column="blog_title"/>
        <association property="author" javaType="Author">
            <id property="id" column="author_id"/>
            <result property="username" column="author_username"/>
            <result property="password" column="author_password"/>
            <result property="email" column="author_email"/>
            <result property="bio" column="author_bio"/>
            <result property="favouriteSection" column="author_favourite_section"/>
        </association>
        <collection property="posts" ofType="Post">
            <id property="id" column="post_id"/>
            <result property="subject" column="post_subject"/>
            <association property="author" javaType="Author"/>
            <collection property="comments" ofType="Comment">
                <id property="id" column="comment_id"/>
            </collection>
            <collection property="tags" ofType="Tag" >
                <id property="id" column="tag_id"/>
            </collection>
            <discriminator javaType="int" column="draft">
                <case value="1" resultType="DraftPost"/>
            </discriminator>
        </collection>
    </resultMap>

-->

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from draft
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <!--
        非主键删除
    -->
    <delete id="deleteByPrimaryKey2" parameterType="java.lang.String">
        delete from draft
        where draftno = #{draftno,jdbcType=VARCHAR}
    </delete>
    <!--
        searchbean删除
    -->

    <delete id="deleteByPrimaryKey3" parameterType="com.core.rule.bean.dataObj.DraftDo">
      <!--看是否自动根据入参映射    ***不能  全部把数据删了
        delete from draft

        所以还需要在sql对属性进行判断
       -->
        delete from draft where 1=1
        <if test = "draftno != null">
            and draftno = #{draftno}
        </if>
        <if test = "draftdescribe != null">
            and draftdescribe = #{draftdescribe}
        </if>
    </delete>


  <insert id="insert" parameterType="com.core.rule.bean.dataObj.DraftDo" useGeneratedKeys = "true" keyProperty="id">
    insert into draft (id, draftNo, draftDescribe,
      draftTemplate)
    values
    (#{id,jdbcType=BIGINT}, #{draftno,jdbcType=VARCHAR}, #{draftdescribe,jdbcType=VARCHAR},
<!--
/*(#{id,jdbcType=BIGINT}, #{draftno}, #{draftdescribe,jdbcType=VARCHAR},*/
 /*为了测试参数为null必须有jdbcType
 Error setting null for parameter #5 with JdbcType OTHER . Try setting a different JdbcType for this parameter or a different jdbcTypeForNull configuration property. Cause: java.sql.SQLException: Parameter index out of range (5 > number of parameters, which is 4).
 */
 还可以指定typeHandler=MyTypeHandler
 #{height,javaType=double,jdbcType=NUMERIC,numericScale=2}
 MyBatis 也支持很多高级的数据类型，比如结构体（structs），但是当使用 out 参数时，你必须显式设置类型的名称。比如（再次提示，在实际中要像这样不能换行）：

#{middleInitial, mode=OUT, jdbcType=STRUCT, jdbcTypeName=MY_TYPE, resultMap=departmentResultMap}
-->
      #{drafttemplate,jdbcType=LONGVARBINARY})
  </insert>
<!--    parameterType="com.core.rule.bean.dataObj.DraftDo" 自动匹配

 缺少separator=","报下面错误
draftDescribe,draftTemplate)values

         (?, ?, ?,
        ?)

         (?, ?, ?,
        ?)

-->
    <insert id="insertBatch"  useGeneratedKeys = "true" keyProperty="id">
        insert into draft (id, draftNo, draftDescribe,draftTemplate)values
         <foreach item = "item" collection="list" separator=",">
         (#{item.id,jdbcType=BIGINT}, #{item.draftno,jdbcType=VARCHAR}, #{item.draftdescribe,jdbcType=VARCHAR},
        #{item.drafttemplate,jdbcType=LONGVARBINARY})
         </foreach>
    </insert>

  <update id="updateByPrimaryKey" parameterType="com.core.rule.bean.dataObj.DraftDo">

    update draft set draftNo = #{draftno,jdbcType=VARCHAR},draftDescribe = #{draftdescribe,jdbcType=VARCHAR},
    draftTemplate = #{drafttemplate,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
      <!--
      update draft set draftNo = #{draftno,jdbcType=VARCHAR}
            and draftDescribe = #{draftdescribe,jdbcType=VARCHAR}
            and draftTemplate = #{drafttemplate,jdbcType=LONGVARBINARY}
            where id = #{id,jdbcType=BIGINT-->
  </update>

    <update id="updateByPrimaryKey2" parameterType="com.core.rule.bean.dataObj.DraftDo">
<!--引入set标签-->
        update draft
        <set>
            <if test = "draftno != null">draftno = #{draftno},</if>
            <if test = "draftdescribe != null">draftdescribe= #{draftdescribe},</if>
            <if test = "drafttemplate != null">drafttemplate = #{drafttemplate}</if>
        </set>
        <where> id = #{id}</where>
    </update>


  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, draftNo, draftDescribe, draftTemplate
    from draft
    where id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectAll" resultMap="BaseResultMap">
    select id, draftNo, draftDescribe, draftTemplate
    from draft
  </select>

    <!--compositResultMap这里只能就是 list 中的个体 无需指名是否返回list 那么定义方法可以随意吗？-->
    <select id="selectComposit" resultMap="compositResultMap">
        select t1.draftNo, t2.property
        from draft t1 join property t2 on t1.draftNo = t2.draftNo;
    </select>

    <!--完整的查询语句-->
  <select id="selectBySearchBean" parameterType="com.core.rule.bean.dataObj.DraftDo" resultMap="BaseResultMap">
    select *  from draft
      <trim prefix="WHERE" prefixOverrides="AND | OR ">
    <!--如果第一个参数为空，则可能报错  所以修改where-->
        <!--<where> 去掉-->
            <if test = "id != null">id = #{id}</if>     <!--set的时候才有，-->
            <if test = "draftno != null">and draftno = #{draftno}</if>
            <if test = "draftdescribe != null">and draftdescribe = #{draftdescribe}</if>

      </trim>
      <!--其他固定语句  where draftNo = #{draftNo,jdbcType=VARCHAR}-->
  </select>

    <!--in  可以配合这里的index得到entry进行处理
    你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象传递给 foreach 作为集合参数。当使用可迭代对象或者数组时，index 是当前迭代的次数，
    item 的值是本次迭代获取的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。
    -->
    <select id="selectByin"  resultMap="BaseResultMap">
        select *  from draft
        where id in
        <foreach item="item" index="index" collection="list"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="selectLike"  resultMap="BaseResultMap">
        <!--<bind name="pattern" value="'%' + draftDo.getDraftno() + '%'" />   注意这里必须_parameter.getDraftno()来定义  也可以写成sql语句-->
        <bind name="pattern2" value="'%' + _parameter.getDraftno() + '%'" />
        select * from draft
        where draftno like #{pattern}
    </select>

    <select id="selectLike"  resultMap="BaseResultMap">
        select * from draft
        <!--拼接可以吗  不可以
         [MyBatis]模糊查询LIKE的三种方式：https://blog.csdn.net/why15732625998/article/details/79081146
         -->
        where draftno like '%'+#{draftno}+'%'
    </select>
</mapper>