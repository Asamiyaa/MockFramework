mybatis.mapper-locations=classpath:mapping/*.xml  

#数据源
#spring.datasource.name=mockframework
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mockframework
#spring.datasource.username=admin
#spring.datasource.password=root0312

#druid
spring.datasource.druid.url=jdbc:mysql://localhost:3306/mockframework?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.druid.username=admin
spring.datasource.druid.password=root0312
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver

# 初始化时建立物理连接的个数
spring.datasource.druid.initial-size=5
# 最大连接池数量
spring.datasource.druid.max-active=30
# 最小连接池数量
spring.datasource.druid.min-idle=5
# 获取连接时最大等待时间，单位毫秒
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 连接保持空闲而不被驱逐的最小时间
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-return=false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=50
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计
spring.datasource.druid.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.use-global-data-source-stat=true
# druid连接池监控
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=root0312
# 排除一些静态资源，以提高效率
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*

#配置测试获取配置信息  - 自己家在实现的任意定义，使用spring或者其他套件就要遵循人家定义的key
a.b.c=123

#redis
#redis配置
#Redis数据库索引（缓存将使用此索引编号的数据库）注意这里通过redis client 查看时需要向select 10 切过去，再去get
spring.redis.database=1
#Redis服务器地址
spring.redis.host=127.0.0.1
#Redis服务器连接端口
spring.redis.port=6379 
#Redis服务器连接密码（默认为空）
spring.redis.password=
#连接超时时间 毫秒（默认2000）
#请求redis服务的超时时间,这里注意设置成0时取默认时间2000
spring.redis.timeout=2000ms
#连接池最大连接数（使用负值表示没有限制）
#建议为业务期望QPS/一个连接的QPS,例如50000/1000=50
#一次命令时间(borrow|return resource+Jedis执行命令+网络延迟)的平均耗时约为1ms,一个连接的QPS大约是1000

#没有spring前缀
redis.pool.max-active=50
#连接池中的最大空闲连接
#建议和最大连接数一致,这样做的好处是连接数从不减少,从而避免了连接池伸缩产生的性能开销。
redis.pool.max-idle=50
#连接池中的最小空闲连接
#建议为0，在无请求的状况下从不创建链接
redis.pool.min-idle=0 
#连接池最大阻塞等待时间 毫秒（-1表示没有限制）
#建议不要为-1，连接池占满后无法获取连接时将在该时间内阻塞等待，超时后将抛出异常。
redis.pool.max-wait=2000

#log
#过滤输出 控制台和文件 info 默认
logging.level.root=info
#logging.path=C:/log/mockFramework.log
logging.file=C:/log/mockFramework.log
#项目更目录输出
#logging.file=mockFramework.log
#定制
#logging.level.com.jackie.springbootdemo.config=WARN
logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n 
logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n

#activiti配置
spring.activiti.database-schema-update=true
spring.activiti.check-process-definitions=true
spring.activiti.history-level=full
spring.activiti.process-definition-location-prefix=classpath:processes

# spring boot 2.x 已集成Quartz，无需自己配置
spring.profiles.include="classpath:schedual/application-quartz.xml"
spring.quartz.job-store-type=jdbc
spring.quartz.properties.org.quartz.scheduler.instanceName=clusteredScheduler
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
spring.quartz.properties.org.quartz.jobStore.tablePrefix=QRTZ_
spring.quartz.properties.org.quartz.jobStore.isClustered=true
spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval=10000
spring.quartz.properties.org.quartz.jobStore.useProperties=false
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
spring.quartz.properties.org.quartz.threadPool.threadCount=10
spring.quartz.properties.org.quartz.threadPool.threadPriority=5
spring.quartz.properties.org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true

#activityMQ 高级使用，详见照片中xml配置方式(了解其代码组成 配置各个对象包含及对象间关系(包括框架自身得类)，属性配置
#  ${}从property中获取配置参数... 转到这里这些都是默认的})，注解/配置 -- xml -- 代码原理( 层层封装 )
#springboot中这样写，就相当于将上面的直接隐藏，直接隐藏了该过程
#暂时不使用先注销掉
spring.activemq.broker-url=tcp://127.0.0.1:61616
#spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=admin
amq.listener.switch=1  //一定是接受时  因为暂时没启动所以注掉
####spring.activemq.
#spring.activemq.pool.max-connections=20  //需要单独创建工厂
#spring.activemq.







